<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Strazzere</title>
  
  <subtitle>... it all can be reversed</subtitle>
  <link href="https://strazzere.com/atom.xml" rel="self"/>
  
  <link href="https://strazzere.com/"/>
  <updated>2025-02-06T20:16:02.091Z</updated>
  <id>https://strazzere.com/</id>
  
  <author>
    <name>Tim Strazzere</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Electron code reuse, and other hackery</title>
    <link href="https://strazzere.com/2025/02/electron-code-reuse-and-other-hackery/"/>
    <id>https://strazzere.com/2025/02/electron-code-reuse-and-other-hackery/</id>
    <published>2025-02-06T18:34:57.000Z</published>
    <updated>2025-02-06T20:16:02.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Electron-and-local-environments"><a href="#Electron-and-local-environments" class="headerlink" title="Electron and local environments"></a>Electron and local environments</h1><p>After a few years of dealing with a rather large <a href="https://www.electronjs.org/">Electron</a> application. I’ve found a few different ways to approach things – as with anyone dealing with large bohemoth codebases, it feels natural to carve it up and chunk out the code into more managable pieces. This leads us from having one large, insanely unplanned renderer, to having “nicer” (though not great) smaller packages which can be reused across the renderer, the main process and even outside in other non-electron focused services. This can lead to interesting problems though, such as making the code aware (without caring) where it is being executed. The <code>electron</code> package itself tends to abstract these things away whether the code is run on Windows&#x2F;MacOS&#x2F;Linux - however what about when you aren’t utilizing the target code <em>within</em> <code>Electron</code> anymore?</p><h2 id="isPackaged"><a href="#isPackaged" class="headerlink" title="isPackaged"></a>isPackaged</h2><p><code>Electron</code> gives us a method, <a href="https://www.electronjs.org/docs/latest/api/app#appispackaged-readonly">app.isPackaged</a> through it’s main API, however this isn’t useful to use unless we want to import <code>electron</code> into all of our code. Specifically it let’s us determine</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A boolean property that returns true if the app is packaged, false otherwise. For many apps, this property can be used to distinguish development and production environments.</span><br></pre></td></tr></table></figure><h2 id="Are-we-in-electron-or-not"><a href="#Are-we-in-electron-or-not" class="headerlink" title="Are we in electron or not?"></a>Are we in electron or not?</h2><p>There are a few <a href="https://www.electronjs.org/docs/latest/api/process">process</a> properties which are interesting in Electron. Specifically <a href="https://www.electronjs.org/docs/latest/api/process">process.resourcePath</a> and <a href="https://www.electronjs.org/docs/latest/api/process#processtype-readonly">process.type</a>. These are both extremely interesting to me, as often in code I need to get an asset file - though the path for such a file will change depending on if it is packaged, running as development <code>electron</code> or as <code>node-js</code>.</p><p>So, what we want to do, is check to see if <code>process.resourcesPath</code> returns anything - which it will not in <code>node.js</code>. If it does return something, we want to check if it returns something <em>with</em> <code>app.asar</code> inside it. This would mean (based on how we bundle things for distribution) that <code>electron</code> is bundled. This does mean, we will need to ignore expected <code>typescript</code> errors, as the type checking doesn’t expect <code>resourcePath</code> to ever exist on the <code>process</code> object. This lands us to this type of statement;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @@ts-expect-error</span></span><br><span class="line"><span class="keyword">const</span> isPackaged = process?.<span class="property">resourcesPath</span></span><br><span class="line">  ? fs.<span class="title function_">pathExistsSync</span>(path.<span class="title function_">join</span>(process.<span class="property">resourcesPath</span>, <span class="string">&quot;app.asar&quot;</span>))</span><br><span class="line">  : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>Now you can properly write functions to handle code differently based on whether the code is inside the <code>main</code> process, <code>renderer</code> or being run by some of your <code>node-js</code> code directly. Here is a prototype function I came up with which is semi-specific for my usecase, due to the local compile locations (<code>elect/</code> vs <code>elect/js</code> vs <code>src/cli/</code>);</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle getting the resource correctly based on if the electron</span></span><br><span class="line"><span class="comment"> * application is packages, main or renderer in dev mode.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">fileName</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getResourcePath</span>(<span class="params"><span class="attr">fileName</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="comment">// @@ts-expect-error</span></span><br><span class="line">  <span class="keyword">const</span> isPackaged = process?.<span class="property">resourcesPath</span></span><br><span class="line">    ? fs.<span class="title function_">pathExistsSync</span>(path.<span class="title function_">join</span>(process.<span class="property">resourcesPath</span>, <span class="string">&quot;app.asar&quot;</span>))</span><br><span class="line">    : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isPackaged) &#123;</span><br><span class="line">    <span class="comment">// @@ts-expect-error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`isPackaged <span class="subst">$&#123;isPackaged&#125;</span> : <span class="subst">$&#123;path.join(process.resourcesPath, <span class="string">&quot;app.asar&quot;</span>)&#125;</span>`</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// @@ts-expect-error</span></span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(<span class="string">`<span class="subst">$&#123;process.resourcesPath&#125;</span>/app.asar/`</span>, fileName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// renderer (type renderer) is run out of elect/</span></span><br><span class="line">  <span class="comment">// main (type browser) is run out of elect/js/</span></span><br><span class="line">  <span class="comment">// node (type undefined) is run out of src/cli/</span></span><br><span class="line">  <span class="comment">// @@ts-expect-error</span></span><br><span class="line">  <span class="keyword">const</span> isRenderer =</span><br><span class="line">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(process, <span class="string">&quot;type&quot;</span>) &amp;&amp;</span><br><span class="line">    process.<span class="property">type</span> === <span class="string">&quot;renderer&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">join</span>(</span><br><span class="line">    isRenderer ? <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../`</span> : <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../../`</span>,</span><br><span class="line">    fileName,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Electron-and-local-environments&quot;&gt;&lt;a href=&quot;#Electron-and-local-environments&quot; class=&quot;headerlink&quot; title=&quot;Electron and local environment</summary>
      
    
    
    
    <category term="electron" scheme="https://strazzere.com/categories/electron/"/>
    
    <category term="typescript" scheme="https://strazzere.com/categories/electron/typescript/"/>
    
    
    <category term="typescript" scheme="https://strazzere.com/tags/typescript/"/>
    
    <category term="electron" scheme="https://strazzere.com/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>frida-stack, making life a bit nicer while reversing unknown issues</title>
    <link href="https://strazzere.com/2024/06/frida-stack-making-life-a-bit-nicer/"/>
    <id>https://strazzere.com/2024/06/frida-stack-making-life-a-bit-nicer/</id>
    <published>2024-06-18T07:00:00.000Z</published>
    <updated>2024-06-18T22:26:37.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-long-time-ago…"><a href="#A-long-time-ago…" class="headerlink" title="A long time ago…"></a>A long time ago…</h2><p>In a contract, long forgotten at this point, I had to do quite a bit of reverse engineering against a few “<a href="https://github.com/strazzere/android-unpacker">hardened</a>“ targets. The targets generally all followed the same types of protection schemes, though they would roll out new versions weekly as well as toggle different anti-debug&#x2F;reverse&#x2F;etc style protections. The client didn’t actually run most of the code, but they wanted a stable environment which could handle bringing up these different targets without needing to worry about what was going on under the hood.</p><p>Instead of approaching this as a static project like I normally had done in the past, I began to (at the time) begrudgingly utilize <a href="https://frida.re/">frida</a>. Like everything in the reverse engineering world, tooling is contentious. Whether you’re asking people if they use <code>IDA</code> (IlFaK WoN’T aCcEpT mY CrEdIt CaRd), <code>ghirda</code> (It’S nOt r2) - mentioning usage of <code>frida</code> will illicit lots of reactions. Over the years, I’ve become a true believer though, once I figured out how to bend the tooling to do exactly what I wanted it too. Enter, hopefully what becomes a bit of a series, some of my tooling from long expired contracts that I’ve found helpful when approaching hardened targets.</p><h2 id="frida-stack"><a href="#frida-stack" class="headerlink" title="frida-stack"></a>frida-stack</h2><p>Whenever I approached a hardened target I found myself wanting to just get a lay of the land while I file up the bulk of my tooling. Get <code>IDA</code> to start processing any native code that looks interesting, disassemble everything with <code>baksmali</code> and fire up the application and attach to it with <code>frida</code> for a nice <code>repl</code> session.</p><p>Often when something is hardened even slightly, something will get detected as you begin poking around. Just having a <code>repl</code> session open often won’t trigger these types of anti-debug actions, as it only has injected <code>frida</code> into the process space. Sometimes it will occur once you’ve begun hooking functionality.</p><p>With this in mind, I tend to just inject and hook my generic anti* utilities into the process. These often rely on hooking <code>libc</code> functionality at a low level, just to see when things get entered&#x2F;exited, etc. One such example function I’ve found useful is to hook <code>_exit</code> from <code>libc</code> (often alongside with <code>abort</code>, <code>exit</code>, <code>kill</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_exit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _exitPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;_exit&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_exitPtr) &#123;</span><br><span class="line">    <span class="keyword">const</span> _exit = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(_exitPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(</span><br><span class="line">      _exitPtr,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] _exit : <span class="subst">$&#123;status&#125;</span> from <span class="subst">$&#123;<span class="variable language_">this</span>.context.pc)&#125;</span>`</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">_exit</span>(status);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;int&#x27;</span>,</span><br><span class="line">        [<span class="string">&#x27;int&#x27;</span>],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This can be thrown into a <code>repl</code> or script to inject pretty easily. Sometimes just injecting something like this will trigger different packers&#x2F;protections to freak out. Granted, if they detect the injection, and they are <em>not</em> utilizing <code>_exit</code> we won’t see much other than the process die, which is why it can be sometimes nice to just hook a large variety of things wholesale and store those scripts for repeated usage. Though if they <em>do</em> utilize <code>_exit</code> we would get some output like;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::com.example.package ]-&gt; [+] _exit : 0 from 0x7713d25000</span><br></pre></td></tr></table></figure><p>Awesome! This is fun and useful because we now know where the <code>_exit</code> function was called from. Obviously, due to our code before, the process still was allowed to exit, which means we can’t skim the <code>/proc/$&#123;pid&#125;/maps</code> to see what that memory specifically was allocated too.</p><p>Normally in <code>frida</code> the usage pattern is to do something like the following to that address;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libcommonCrypto.dylib&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CCCryptorCreate&#x27;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(f, &#123;</span><br><span class="line">  <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CCCryptorCreate called from:\n&#x27;</span> +</span><br><span class="line">        <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(From the <code>Thread.backtrace</code> example on <a href="https://frida.re/docs/javascript-api/">frida.re&#x2F;docs&#x2F;javascript-api</a>)</p><p>This can work well, and when it does we can get a nice layout of which module the context came from. Though I’ve found, especially when digging into dynamically allocated code, this tends to fail. This brings me to the bulk of my code snippet;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a decorated string, similar to DebugSymbol.fromAddress</span></span><br><span class="line"><span class="comment"> * and Process.getModuleFromAddress, however if those fail we</span></span><br><span class="line"><span class="comment"> * will forcefully look up the address association via the mappings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For some reason, DebugSymbol.fromAddress doesn&#x27;t always work,</span></span><br><span class="line"><span class="comment"> * nor does Process.getModuleFromAddress, so utilize enumerating the</span></span><br><span class="line"><span class="comment"> * addresses manually to figure out what the module is and the local</span></span><br><span class="line"><span class="comment"> * offset inside it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> address Address to look up details for.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> string of relevant data `0x7713d25000 libsharedlib.so:0x1aae8`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getModuleInfo</span>(<span class="params">address: NativePointer</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> debugSymbol = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(address);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (debugSymbol.<span class="property">moduleName</span>) &#123;</span><br><span class="line">    <span class="comment">// Add local offset?</span></span><br><span class="line">    <span class="keyword">return</span> debugSymbol.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When hooking we might get something interesting like the following;</span></span><br><span class="line">  <span class="comment">//  [</span></span><br><span class="line">  <span class="comment">//    &#123;</span></span><br><span class="line">  <span class="comment">//      &quot;base&quot;: &quot;0x76fa7000&quot;,    &lt;==== [anon:dalvik-free list large object space]</span></span><br><span class="line">  <span class="comment">//      &quot;protection&quot;: &quot;rw-&quot;,           we don&#x27;t actually care about this</span></span><br><span class="line">  <span class="comment">//      &quot;size&quot;: 536870912</span></span><br><span class="line">  <span class="comment">//    &#125;,</span></span><br><span class="line">  <span class="comment">//    &#123;</span></span><br><span class="line">  <span class="comment">//      &quot;base&quot;: &quot;0x771e939000&quot;, &lt;==== this isn&#x27;t the actual base, we need to refind that</span></span><br><span class="line">  <span class="comment">//      &quot;file&quot;: &#123;</span></span><br><span class="line">  <span class="comment">//        &quot;offset&quot;: 663552,</span></span><br><span class="line">  <span class="comment">//         &quot;path&quot;: &quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;,</span></span><br><span class="line">  <span class="comment">//         &quot;size&quot;: 0</span></span><br><span class="line">  <span class="comment">//      &#125;,</span></span><br><span class="line">  <span class="comment">//     &quot;protection&quot;: &quot;rwx&quot;,</span></span><br><span class="line">  <span class="comment">//     &quot;size&quot;: 4096</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> builtSymbol = &#123;</span><br><span class="line">    <span class="attr">base</span>: <span class="title function_">ptr</span>(<span class="number">0x0</span>),</span><br><span class="line">    <span class="attr">moduleName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ranges = <span class="title class_">Process</span>.<span class="title function_">enumerateRanges</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">filter</span>(</span><br><span class="line">    <span class="function">(<span class="params">range</span>) =&gt;</span> range.<span class="property">base</span> &lt;= address &amp;&amp; range.<span class="property">base</span>.<span class="title function_">add</span>(range.<span class="property">size</span>) &gt;= address,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  ranges.<span class="title function_">forEach</span>(<span class="function">(<span class="params">range</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (range.<span class="property">file</span>) &#123;</span><br><span class="line">      builtSymbol.<span class="property">path</span> = range.<span class="property">file</span>.<span class="property">path</span>;</span><br><span class="line">      <span class="keyword">const</span> moduleNameChunks = range.<span class="property">file</span>.<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      builtSymbol.<span class="property">moduleName</span> = moduleNameChunks[moduleNameChunks.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      builtSymbol.<span class="property">base</span> = range.<span class="property">base</span>.<span class="title function_">sub</span>(range.<span class="property">file</span>.<span class="property">offset</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ranges = <span class="title class_">Process</span>.<span class="title function_">enumerateRanges</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">filter</span>(</span><br><span class="line">    <span class="function">(<span class="params">range</span>) =&gt;</span> range.<span class="property">base</span> &lt;= builtSymbol.<span class="property">base</span> &amp;&amp; range.<span class="property">base</span>.<span class="title function_">add</span>(range.<span class="property">size</span>) &gt;= builtSymbol.<span class="property">base</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  ranges.<span class="title function_">forEach</span>(<span class="function">(<span class="params">range</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (builtSymbol.<span class="property">base</span> === <span class="title function_">ptr</span>(<span class="number">0x0</span>) || builtSymbol.<span class="property">base</span> &lt; range.<span class="property">base</span>) &#123;</span><br><span class="line">      builtSymbol.<span class="property">base</span> = range.<span class="property">base</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    builtSymbol.<span class="property">size</span> += range.<span class="property">size</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;builtSymbol.base&#125;</span> <span class="subst">$&#123;builtSymbol.moduleName&#125;</span>:<span class="subst">$&#123;address.sub(builtSymbol.base)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(Source <a href="https://github.com/rednaga/frida-stack/blob/main/lib/index.ts#L68-L128">https://github.com/rednaga/frida-stack/blob/main/lib/index.ts#L68-L128</a>)</p><p>If the <code>DebugSymbol.fromAddress</code> works, awesome, let’s use it. Otherwise, let’s seek the <code>Process</code> ranges and look for what is <em>currently</em> sitting there and decorate a string with exactly that.</p><p>Utilizing the above code we can now transform the original example into something like this;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::com.example.package ]-&gt; [+] _exit : 0 from 0x7713d25000 libexamplesharedlib.so:0x1aae8</span><br></pre></td></tr></table></figure><p>This means we can see the original address, which often is pretty useless, but more importantly any process&#x2F;modules names as well as the offset from the base. This ends up being much more functional than just the random address in a now dead process - and is something actionable we can toss into our disassembler of choice and begin to start recursing backwards to find who else may call these functions.</p><h3 id="Extended-usage"><a href="#Extended-usage" class="headerlink" title="Extended usage"></a>Extended usage</h3><p>Obviously it’s fair game to just take the snippet above, however you can also install this snippet as a module for usage within your own scripts.</p><p>Simply install it by utilizing npm;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install frida-stack</span></span><br></pre></td></tr></table></figure><p>Then import it and you will get the function statically accessible, or you can utilize the two helper functions to generate stacks whenever you’d like. One is a method of just getting your place&#x2F;stack inside the <code>Java</code> context via <code>Stack.java()</code>. The other you will need to pass a <code>NativePointer</code> to <code>Stack.native(this.context.pc)</code>.</p><p>So to tune the script above we used as an example;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Stack</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;frida-stack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_exit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _exitPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;_exit&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_exitPtr) &#123;</span><br><span class="line">    <span class="keyword">const</span> _exit = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(_exitPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(</span><br><span class="line">      _exitPtr,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] _exit : <span class="subst">$&#123;status&#125;</span> from <span class="subst">$&#123;Stack.getModuleInfo(<span class="variable language_">this</span>.context.pc)&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Stack</span>.<span class="title function_">native</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">_exit</span>(status);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;int&#x27;</span>,</span><br><span class="line">        [<span class="string">&#x27;int&#x27;</span>],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hopefully this saves others some time while reversing things.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;A-long-time-ago…&quot;&gt;&lt;a href=&quot;#A-long-time-ago…&quot; class=&quot;headerlink&quot; title=&quot;A long time ago…&quot;&gt;&lt;/a&gt;A long time ago…&lt;/h2&gt;&lt;p&gt;In a contract,</summary>
      
    
    
    
    <category term="typescript" scheme="https://strazzere.com/categories/typescript/"/>
    
    <category term="frida" scheme="https://strazzere.com/categories/typescript/frida/"/>
    
    <category term="reverse-engineering" scheme="https://strazzere.com/categories/typescript/frida/reverse-engineering/"/>
    
    <category term="android" scheme="https://strazzere.com/categories/typescript/frida/reverse-engineering/android/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="frida" scheme="https://strazzere.com/tags/frida/"/>
    
    <category term="reverse-engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="typescript" scheme="https://strazzere.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Generic functions with generic arguments for timing</title>
    <link href="https://strazzere.com/2024/05/generic-functions-for-timing/"/>
    <id>https://strazzere.com/2024/05/generic-functions-for-timing/</id>
    <published>2024-05-09T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Adding-timing-for-debuggability"><a href="#Adding-timing-for-debuggability" class="headerlink" title="Adding timing for debuggability"></a>Adding timing for debuggability</h2><p>In a rather large and hard (annoying?) to debug electron application I’ve been working on. Between things running in the main process and the renderer process, having to <code>Promise.race</code> different types of extended calls to usb and serial devices - it can be complicated to know exactly what is going on and what is failing. Utilizing the <code>Chrome Inspector</code> has yielded good results, though sometimes it is just important to have good timing with logs during a development build. Specificially I’ve found this almost required when testing across platforms as Windows handles <code>libusb</code> interactions substantially differently from Linux&#x2F;MacOS.</p><h3 id="First-few-passes"><a href="#First-few-passes" class="headerlink" title="First few passes"></a>First few passes</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyFunction</span> = <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timingFunctionWrap</span>(<span class="params">f: AnyFunction, ...args: Parameters&lt;<span class="keyword">typeof</span> f&gt;</span>): <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(f.<span class="property">name</span>)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">f</span>(...args)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(f.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This worked well for a few functions I had, though when getting heavier into device communications I needed to also handle <code>async</code> functions. Wanting to generalize this even more, it lead to the code looking like so;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyFunction</span> = <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timingFunctionWrap</span>(<span class="params">f: AnyFunction, ...args: Parameters&lt;<span class="keyword">typeof</span> f&gt;</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f&gt;&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(f.<span class="property">name</span>)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">f</span>(...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(f.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This also worked well, and is pretty close to what I ended up. The only final part of the functionality that I wanted to add was signal handling which was not as straight forward as I had originally expected.</p><h3 id="Signal-handling"><a href="#Signal-handling" class="headerlink" title="Signal handling"></a>Signal handling</h3><p>Some of my device communications end up passing around an <code>AbortSignal</code> as a means of not waiting forever incase disconnects or timeouts occur. This is often an optional parameter for the functions, so it isn’t something I can just build into the <code>AnyFunction</code> type like I had hoped;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AnyFunctionWithAbortSignal</span> = <span class="function">(<span class="params">...args: [...<span class="built_in">any</span>[], signal: AbortSignal]</span>) =&gt;</span> <span class="built_in">any</span>;</span><br></pre></td></tr></table></figure><p>This above bit is not viable since the function prototypes often contain signal as <code>signal?: AbortSignal</code>. In all honesty, we probably could just change many places in the code to no longer have the signal be optional, as it is essentially always used. Though now this feels like a code golf and I wanted to find out a solution without refactoring everything. </p><p>This lead to the following code;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyFunction</span> = <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timingFunctionWrap</span>(<span class="params">f: AnyFunction, ...args: Parameters&lt;<span class="keyword">typeof</span> f&gt;</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f&gt;&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(f.<span class="property">name</span>)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">f</span>(...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(f.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> signal = args.<span class="title function_">pop</span>() <span class="keyword">as</span> <span class="title class_">AbortSignal</span></span><br><span class="line">  <span class="keyword">if</span> (signal &amp;&amp; signal.<span class="property">aborted</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;f.name&#125;</span> was aborted`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above works, <em>for me</em>, however it does have an issue because we are making an assertion without checking. This is just assuming that whatever the last argument is inherently always an <code>AbortSignal</code>. Thinking about it for a bit, I needed to have a guard, as I can’t just check the using the <code>instanceof</code> and we can make this an assertion using <code>is</code> like this;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAbortSignal</span>(<span class="params">signal: <span class="built_in">any</span></span>): signal is <span class="title class_">AbortSignal</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> signal <span class="keyword">instanceof</span> <span class="title class_">AbortSignal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pulling this into it’s own function allows us to utilize the <code>is</code> and let the linter know everything below this the type of the object.</p><h2 id="Finalizing-the-code"><a href="#Finalizing-the-code" class="headerlink" title="Finalizing the code"></a>Finalizing the code</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyFunction</span> = <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAbortSignal</span>(<span class="params">signal: <span class="built_in">any</span></span>): signal is <span class="title class_">AbortSignal</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> signal <span class="keyword">instanceof</span> <span class="title class_">AbortSignal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timingFunctionWrap</span>(<span class="params">f: AnyFunction, ...args: Parameters&lt;<span class="keyword">typeof</span> f&gt;</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f&gt;&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(f.<span class="property">name</span>)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">f</span>(...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(f.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> signal = args.<span class="title function_">pop</span>()</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isAbortSignal</span>(signal) &amp;&amp; signal.<span class="property">aborted</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;f.name&#125;</span> was aborted`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So now we have a neat little function which can wrap any function, assert the time it took to finish and notify us if it was aborted.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Adding-timing-for-debuggability&quot;&gt;&lt;a href=&quot;#Adding-timing-for-debuggability&quot; class=&quot;headerlink&quot; title=&quot;Adding timing for debuggabilit</summary>
      
    
    
    
    <category term="typescript" scheme="https://strazzere.com/categories/typescript/"/>
    
    
    <category term="typescript" scheme="https://strazzere.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>S3, IAM, Serverless and Access Denied</title>
    <link href="https://strazzere.com/2023/10/s3-iam-serverless-access-denied/"/>
    <id>https://strazzere.com/2023/10/s3-iam-serverless-access-denied/</id>
    <published>2023-10-17T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="s3-IAM-woes-when-using-serverless"><a href="#s3-IAM-woes-when-using-serverless" class="headerlink" title="s3 IAM woes when using serverless"></a>s3 IAM woes when using serverless</h2><p>Recently I was attempting to deploy a new lambda server over some existing aws architecture, the s3 buckets already existed as well as lots of permissioning. This should be easy? Arguably it was easy and probably would have been easier if I already knew AWS&#x2F;IAM&#x2F;etc - though I don’t so pain was in store for me.</p><p>In general my <a href="https://www.serverless.com/">serverless</a> configuration for the aws&#x2F;iam permissions looked like this;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">provider:</span><br><span class="line">  name: aws</span><br><span class="line">  runtime: nodejs18.x</span><br><span class="line">  region: us-gov-west-1</span><br><span class="line">  endpointType: REGIONAL</span><br><span class="line">  iam:</span><br><span class="line">    role:</span><br><span class="line">      statements:</span><br><span class="line">        - Effect: Allow</span><br><span class="line">          Action:</span><br><span class="line">            - s3:GetObject</span><br><span class="line">            - s3:ListObject</span><br><span class="line">          Resource:</span><br><span class="line">            - &#x27;arn:aws-us-gov:s3:::bucket-name/*&#x27;</span><br></pre></td></tr></table></figure><p>Which I thought would be ok, as this was the generic snippet of code in which I was attempting to list a buckets objects and get tagging information on them;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    const client = new S3Client(&#123;</span><br><span class="line">      region,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const command = new ListObjectsV2Command(&#123;</span><br><span class="line">      Bucket: &#x27;bucket-name&#x27;,</span><br><span class="line">      Delimiter: &#x27;/&#x27;,</span><br><span class="line">      Prefix: &#x27;some/folder/struct/inside/bucket/,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const &#123; Contents &#125; = await client.send(command);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        const command = new GetObjectTaggingCommand(&#123;</span><br><span class="line">          Bucket: bucket,</span><br><span class="line">          Key: object.Key,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        const &#123; TagSet &#125; = await client.send(command).then();</span><br></pre></td></tr></table></figure><p>This worked fine locally when running <code>serverless --offline</code> as the <code>S3Client</code> would grab my local AWS credentials which had (seemingly) the same permissions. This was a sort of, false reality for me, as it took me a moment to even realize that this was happening. After figuring it out, of course it was using my local credentials which had already been over permissioned. Though when <code>serverless</code> bundled and pushed everything utilizing <code>CloudFormation</code>, it was not provisioning the correct permissions for the lambda. This lead in the <code>client.send</code> throwing an <code>Access Denied</code> error. So helpful, just tell me what permission I need already.</p><h3 id="Finding-the-permissions"><a href="#Finding-the-permissions" class="headerlink" title="Finding the permissions"></a>Finding the permissions</h3><p>Per some Googling and reading of the documentation, the command <a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-s3/classes/listobjectsv2command.html">ListObjectsV2Command</a>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To use this operation, you must have READ access to the bucket.</span><br><span class="line"></span><br><span class="line">To use this action in an Identity and Access Management (IAM) policy, you must have permission to perform the s3:ListBucket action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources in the Amazon S3 User Guide.</span><br></pre></td></tr></table></figure><p>So we will need <code>READ</code> access, meaing we should be able to <code>s3:ListBucket</code>. I assumed <code>READ</code> meant <code>s3:GetObject</code>, so I think we got it, it looks like we already had this?</p><p>For <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTaggingCommand</a> the documentation states;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">To use this operation, you must have permission to perform the s3:GetObjectTagging action. By default, the GET action returns information about current version of an object. For a versioned bucket, you can have multiple versions of an object in your bucket. To retrieve tags of any other version, use the versionId query parameter. You also need permission for the s3:GetObjectVersionTagging action.</span><br></pre></td></tr></table></figure><p>So <code>s3:GetObjectTagging</code> is likely enough? Even though we haven’t gotten to this line yet in our execution.</p><h3 id="Over-permissioning-for-Testing"><a href="#Over-permissioning-for-Testing" class="headerlink" title="Over-permissioning for Testing"></a>Over-permissioning for Testing</h3><p>Annoyingly I tried many permutations and couldn’t seem to get anything right, so I tried just over permissioning it to see if this would simply allow it;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- Effect: Allow</span><br><span class="line">  Action:</span><br><span class="line">    - s3:*</span><br><span class="line">  Resource:</span><br><span class="line">    - &#x27;arn:aws-us-gov:s3:::*&#x27;</span><br></pre></td></tr></table></figure><p>This above one worked - as excepted. At least at this point we know it is possible and we can try to trim down the permissions.</p><h3 id="Minimizing-permissions"><a href="#Minimizing-permissions" class="headerlink" title="Minimizing permissions"></a>Minimizing permissions</h3><p>Re-(re-re-re-)reading AWS docs, I tried to break out the permissions into different roles to avoid over permissioning things. Something I had missed originally was that you want to literally list a bucket (root directory) with no glob when specifying <code>s3:ListBucket</code> which is required for <code>ListObjectsV2Command</code> so this should work;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iam:</span><br><span class="line">  role:</span><br><span class="line">    statements:</span><br><span class="line">      - Effect: Allow</span><br><span class="line">        Action:</span><br><span class="line">          - s3:ListObject</span><br><span class="line">        Resource:</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name/*&#x27;</span><br><span class="line">      - Effect: Allow</span><br><span class="line">        Action:</span><br><span class="line">          - s3:ListBucket</span><br><span class="line">        Resource:</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name&#x27;</span><br></pre></td></tr></table></figure><p>This allowed our <code>ListObjectsV2Command</code> to work! Now we got an error on the <code>GetObjectTaggingCommand</code>. Digging back into this side, I added the <code>s3:GetObject</code> and <code>s3:GetObjectTagging</code> permissions to the globbed bucket;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iam:</span><br><span class="line">  role:</span><br><span class="line">    statements:</span><br><span class="line">      - Effect: Allow</span><br><span class="line">        Action:</span><br><span class="line">          - s3:GetObject</span><br><span class="line">          - s3:ListObject</span><br><span class="line">          - s3:GetObjectTagging</span><br><span class="line">        Resource:</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name/*&#x27;</span><br><span class="line">      - Effect: Allow</span><br><span class="line">        Action:</span><br><span class="line">          - s3:ListBucket</span><br><span class="line">        Resource:</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name&#x27;</span><br></pre></td></tr></table></figure><p>Excellent, this worked as well. Now to minimize the scope of what this lambda is allowed to access. </p><h2 id="Final-minimization-of-scope"><a href="#Final-minimization-of-scope" class="headerlink" title="Final minimization of scope"></a>Final minimization of scope</h2><p>Since I originally didn’t set up these buckets, there actually had been a decent amount of files stored here and while this lambda doesn’t try to interact with it, I just don’t want to let it even have permissions to look at those files. Per the example, I abstracted it to <code>some/folder/struct/inside/bucket/</code> and let’s pretend I also want to access <code>some/other/folder</code>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">iam:</span><br><span class="line">  role:</span><br><span class="line">    statements:</span><br><span class="line">      - Effect: Allow</span><br><span class="line">        Action:</span><br><span class="line">          - s3:GetObject</span><br><span class="line">          - s3:ListObject</span><br><span class="line">          - s3:GetObjectTagging</span><br><span class="line">        Resource:</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name/some/other/folder/*&#x27;</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name/some/folder/struct/inside/bucket/*&#x27;</span><br><span class="line">      - Effect: Allow</span><br><span class="line">        Action:</span><br><span class="line">          - s3:ListBucket</span><br><span class="line">        Resource:</span><br><span class="line">          - &#x27;arn:aws-us-gov:s3:::bucket-name&#x27;</span><br></pre></td></tr></table></figure><p>Bingo! Once you see it all layed out and have done it once, it all makes more sense and seems simple. Though, when you’re grinding for a day or two on the issue and waiting for the lambda to compile&#x2F;upload&#x2F;etc it can be quiet annoying…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;s3-IAM-woes-when-using-serverless&quot;&gt;&lt;a href=&quot;#s3-IAM-woes-when-using-serverless&quot; class=&quot;headerlink&quot; title=&quot;s3 IAM woes when using ser</summary>
      
    
    
    
    <category term="aws" scheme="https://strazzere.com/categories/aws/"/>
    
    <category term="typescript" scheme="https://strazzere.com/categories/aws/typescript/"/>
    
    
    <category term="typescript" scheme="https://strazzere.com/tags/typescript/"/>
    
    <category term="s3" scheme="https://strazzere.com/tags/s3/"/>
    
    <category term="iam" scheme="https://strazzere.com/tags/iam/"/>
    
    <category term="serverless" scheme="https://strazzere.com/tags/serverless/"/>
    
    <category term="aws" scheme="https://strazzere.com/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Home Assistant and the Whole House Fan</title>
    <link href="https://strazzere.com/2023/10/home-assistant-and-the-house-fan/"/>
    <id>https://strazzere.com/2023/10/home-assistant-and-the-house-fan/</id>
    <published>2023-10-06T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Home-Assistant-and-the-Wole-House-Fan"><a href="#Home-Assistant-and-the-Wole-House-Fan" class="headerlink" title="Home Assistant and the Wole House Fan"></a>Home Assistant and the Wole House Fan</h2><p>During COVID my wife and I moved to a new place - which presented the opportunity to redo some simple home automation things I haphazardly set up in our old place. Nothing was really the same, but this time I wanted to try out doing things “right” using zigbee and wifi automations and to try and tie it all together with <a href="https://github.com/home-assistant">Home Assistant</a>. This all went pretty well except for one item I always wanted to automate but never found a great solution for.</p><p>Before I go any further, I want to preface the rest with, I’m not an electrician, I guessed at some things and I also just experimented to see what would work. There could be better ways to do this all, but this is mostly just a stream of thought of my experience while I’m flying for work and a documentation for myself later if I ever need to redo this in the future. Best of luck if you’re trying this for yourself!</p><h3 id="The-Whole-House-Fan-Switch"><a href="#The-Whole-House-Fan-Switch" class="headerlink" title="The Whole House Fan Switch"></a>The Whole House Fan Switch</h3><p>Below is the switch which I never knew what to do with. In case you never have heard of or seen these things (I hadn’t) - a whole house fan basically acts as an air exchange. Large fan in your ceiling that goes to your attic&#x2F;roof which often has two speeds. Crack open your windows (which is a must, or you’re create a vaccuum and break something) and the air will get pulled in and into the attic. This works great for the summer months and can also be a great way to just clear the house of any unfortunate smells. The speed and useful of these fans is even easily seen on temp&#x2F;humidity monitors that are place in the house. With that said, here is a photo of the switch in question that controls the whole house fan;</p><p><img src="/images/eggtimerswitch.png" alt="Gotta love the beige"></p><p>Clearly a Lutron Caseta switch wouldn’t just drop in here, and I wasn’t sure what the load was on the whole house fan. If you Google for a solution, most folks say it’s pretty easy, just “find a relay that will work, and wire it in circuit with your switches”. Generally speaking, I understand this, practically speaking, I don’t know why I would want a relay and then what type of IoT switch should I do? I had a few of the <code>SonOff Mini Extreme 4 (MINIR4)</code>‘s kicking around from when I was toying with them in a few switches for some projects, so I figured maybe this would would. They are rated for 10A and looking at the fan switch in the ceiling, it claimed to never pull more than that. I likely should have verified this with a multimeter, though I didn’t bother. The wiring of behind the timer and hi&#x2F;low switch was like the following;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">         ____</span><br><span class="line">        |FAN |</span><br><span class="line">        |____|</span><br><span class="line">         ||||</span><br><span class="line">        //  \\</span><br><span class="line">Ground_//    \\ &lt;-- High (black) \ Low (red) speed wires</span><br><span class="line">Common_/      \\</span><br><span class="line">      |       | \</span><br><span class="line">Load  |       |  \</span><br><span class="line"> __|__|_    __|___|_</span><br><span class="line">| Timer |  | High | |</span><br><span class="line">|_______|  |____Low_|</span><br><span class="line">  |   |       |  |</span><br><span class="line">  G   +-------+  G</span><br><span class="line">        Load</span><br></pre></td></tr></table></figure><p>Above is my “simplified” look at the wiring. So the timer controls passing electricity (load) to the high &#x2F; low switch, which will only occur if the egg timer dial has been switched this causes the fan to receive power and be “on”. The power goes to the high &#x2F; low switch which will toggle sending the power to one of the two wires based on the speed setting. If the high toggle is set, it chooses the black wire, low setting the red wire.</p><p>So essentially all we want to do is interrupt this by inserting the <code>minir4</code> into this circuit so we can trigger the power on when we want to remotely or automatically. The new diagram ends up being;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">                          ____</span><br><span class="line">                          |FAN |</span><br><span class="line">                          |____|</span><br><span class="line">                          ||||</span><br><span class="line">                          // \\</span><br><span class="line">                  Ground_//   \\ &lt;-- High (black) \ Low (red) speed wires</span><br><span class="line">         _________Common_/    | \</span><br><span class="line"> _____  |   __________        |  \</span><br><span class="line">|     N-+  |  +---+   |       |   \</span><br><span class="line">| M   N----+  |  _|___|_    __|___|_</span><br><span class="line">| I  Lo-------+ | Timer |  | High | |</span><br><span class="line">| N  Li---Load  |_______|  |____Low_|</span><br><span class="line">| I  S1----      |   |       |  |</span><br><span class="line">| V  S2-+ |      G   |       |  G</span><br><span class="line">| 4   | | +----------+       |</span><br><span class="line">|_____| +--------------------+</span><br></pre></td></tr></table></figure><p>This is likely a very bad diagram, but essentially you’re taking the neutral (common&#x2F;white) from the fan, and timer into the <code>miniv4</code>, the Line&#x2F;Load in from the timer and sending it back to the timer via Line&#x2F;Load Out. Then taking the switch (load) out of the timer into S1 and connecting S2 to the high&#x2F;low toggle.</p><p>Once this was done I just “attached” the device before closing up the panel using the Sonoff app - tested that I could toggle the switch and it worked! Was pretty simple once I had drawn out the diagram on paper. The hardest part was actually just removing the egg timer dial without breaking it.</p><p>Though, once I had added the Sonoff integraiton to Home Assistant, I suddenly realized I had a new issue I didn’t think of. Once you toggle the fan via HA - there was no way to manually turn the fan off. This was because the egg timer was “off” but the <code>miniv4</code> could be toggled on. This lead to a funny moment where you could “turn if off” by toggling the egg timer, but when the timer ran out, the fan would be back on.</p><p>This brings me to the next section which is, how the heck do you detect a human interaction (egg timer dial) vs a Home Assistant user action - so that I could set an automation to turn off the fan via a trigger after a certain amount of time. Interestingly enough, this took longer to figure out than the wiring diagram.</p><h3 id="Detecting-manual-switch-usage-vs-automation-user"><a href="#Detecting-manual-switch-usage-vs-automation-user" class="headerlink" title="Detecting manual switch usage vs automation user"></a>Detecting manual switch usage vs automation user</h3><p>This was suprisingly “difficult” in the sense that, the Home Assistant forums where full of interesting information, however most of it either was out dated or never seemed to work for me. The templating in HA is nice, but also can be quiet painful. Essentially the script&#x2F;trigger I would want would follow these rules;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Did a user request the whole house fan? If so continue...</span><br><span class="line">2. Is there a window open? If so continue...</span><br><span class="line">3. Trigger an alert to primary user notifying that the fan has started and will auto shut off in 45 minutes.</span><br><span class="line">4. Turn off fan after 45 minutes.</span><br></pre></td></tr></table></figure><p>This to me felt like it should be pretty easy to accomplish, which once you know what you’re doing is “straight forward” (I guess?), though it took lots of debugging and running “traces” - which drove my toddler to think there might be a demon controlling the fan as it open and shut many times over the next few hours.</p><p>Anyway the fix to this was to use a <code>value_template</code> which there is a decent amount of documentation for, however at least from what I read - it all seems kind of conflicting. The templating yaml code is essentially Python and I basically dumped the states of the traces when performing the action physically and then running it via Home Assistant. This led me to see that when the <code>to_state.context.user_id</code> value is <code>null</code> (or for Python, specifically <code>none</code>) it was a physical trigger. So the code ended up being the following;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">alias: Fan automatic timer</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">trigger:</span><br><span class="line">  - platform: state</span><br><span class="line">    entity_id:</span><br><span class="line">      - switch.sonoff_1001e850a7_1</span><br><span class="line">    from: &quot;off&quot;</span><br><span class="line">    to: &quot;on&quot;</span><br><span class="line">    id: fan_on</span><br><span class="line">condition:</span><br><span class="line">  - condition: trigger</span><br><span class="line">    id:</span><br><span class="line">      - fan_on</span><br><span class="line">    enabled: true</span><br><span class="line">  - condition: template</span><br><span class="line">    value_template: &quot;&#123;&#123; trigger.to_state.context.user_id != none &#125;&#125;&quot;</span><br><span class="line">action:</span><br><span class="line">  - device_id: 07e82d65e020441ecce1cf2da26e32eb</span><br><span class="line">    domain: mobile_app</span><br><span class="line">    type: notify</span><br><span class="line">    message: Detecting app change of fan &#123;&#123; result &#125;&#125;</span><br><span class="line">    title: will turn off in 45 minutes</span><br><span class="line">  - delay:</span><br><span class="line">      hours: 0</span><br><span class="line">      minutes: 45</span><br><span class="line">      seconds: 0</span><br><span class="line">      milliseconds: 0</span><br><span class="line">  - type: turn_off</span><br><span class="line">    device_id: deb4e8b79881e8854a980502cae4e8bd</span><br><span class="line">    entity_id: d5695d15d10298b56812c899ad57d206</span><br><span class="line">    domain: switch</span><br><span class="line">    enabled: true</span><br><span class="line">mode: single</span><br></pre></td></tr></table></figure><p>So when the switch (<code>switch.sonoff_1001e850a7_1</code>) is triggered from <code>off</code> to <code>on</code>, we check if the <code>trigger.to_state.context.user_id != none</code> and if that is true, we send a mobile_app notification mentioning this, then delay a task of turning on the entity after <code>45</code> minutes.</p><h3 id="After-thoughts"><a href="#After-thoughts" class="headerlink" title="After thoughts"></a>After thoughts</h3><p>I kind of wished I had installed a lutron switch or second <code>mini4v</code> on the high&#x2F;low toggle. However it would then need to be manually labeled.</p><p>I’ll try to clean up this post as I have time - but this was a bit quick as I was writing it all before a flight I had to take.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Home-Assistant-and-the-Wole-House-Fan&quot;&gt;&lt;a href=&quot;#Home-Assistant-and-the-Wole-House-Fan&quot; class=&quot;headerlink&quot; title=&quot;Home Assistant and</summary>
      
    
    
    
    <category term="homeautomation" scheme="https://strazzere.com/categories/homeautomation/"/>
    
    <category term="electrical" scheme="https://strazzere.com/categories/homeautomation/electrical/"/>
    
    
    <category term="electrical" scheme="https://strazzere.com/tags/electrical/"/>
    
    <category term="homeautomation" scheme="https://strazzere.com/tags/homeautomation/"/>
    
    <category term="homeassistant" scheme="https://strazzere.com/tags/homeassistant/"/>
    
  </entry>
  
  <entry>
    <title>Hot reloading to fix LD_LIBRARY_PATH issues</title>
    <link href="https://strazzere.com/2022/11/hot-reloading-native-shim/"/>
    <id>https://strazzere.com/2022/11/hot-reloading-native-shim/</id>
    <published>2022-11-24T08:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Where-is-my-libart-at"><a href="#Where-is-my-libart-at" class="headerlink" title="Where is my libart at?"></a>Where is my libart at?</h2><p>Since approximately Android 10, <code>libart</code> (<a href="https://source.android.com/docs/core/runtime">Android Runtime</a>) has been moved to the <code>apex</code> (<a href="https://source.android.com/docs/core/ota/apex">Android Pony EXpress</a>) directory. This was a design decision by Google which allowed them to perform updates to the DVM&#x2F;ART subsystem without requiring an OEM to push a full update – and leveraging Google Play to push down smaller packages. This is a win for users, the ecosystem, etc - for both speed, security. Though this sometimes presents an issue for non-standard usecases. One of which is some long standing code I use often for debugging and attacking different applications, the <a href="https://github.com/rednaga/native-shim">native-shim</a>. While it isn’t anything super special, mostly just some boilerplate code and some <code>dlopen</code> calls, it’s an approach I’ve utilized for almost 10 years.</p><h3 id="What-broke-due-to-APEX"><a href="#What-broke-due-to-APEX" class="headerlink" title="What broke due to APEX?"></a>What broke due to APEX?</h3><p>Nothing really “broke”, just we no longer know where to look for <code>libart</code>. If we dig into the <a href="https://cs.android.com/android/platform/superproject/+/master:bionic/linker/linker.cpp">linker code</a> we will see that the default paths generally look like we would expect;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#if defined(__LP64__)</span><br><span class="line">static const char* const kSystemLibDir        = &quot;/system/lib64&quot;;</span><br><span class="line">static const char* const kOdmLibDir           = &quot;/odm/lib64&quot;;</span><br><span class="line">static const char* const kVendorLibDir        = &quot;/vendor/lib64&quot;;</span><br><span class="line">static const char* const kAsanSystemLibDir    = &quot;/data/asan/system/lib64&quot;;</span><br><span class="line">static const char* const kAsanOdmLibDir       = &quot;/data/asan/odm/lib64&quot;;</span><br><span class="line">static const char* const kAsanVendorLibDir    = &quot;/data/asan/vendor/lib64&quot;;</span><br><span class="line">#else</span><br><span class="line">static const char* const kSystemLibDir        = &quot;/system/lib&quot;;</span><br><span class="line">static const char* const kOdmLibDir           = &quot;/odm/lib&quot;;</span><br><span class="line">static const char* const kVendorLibDir        = &quot;/vendor/lib&quot;;</span><br><span class="line">static const char* const kAsanSystemLibDir    = &quot;/data/asan/system/lib&quot;;</span><br><span class="line">static const char* const kAsanOdmLibDir       = &quot;/data/asan/odm/lib&quot;;</span><br><span class="line">static const char* const kAsanVendorLibDir    = &quot;/data/asan/vendor/lib&quot;;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">static const char* const kDefaultLdPaths[] = &#123;</span><br><span class="line">  kSystemLibDir,</span><br><span class="line">  kOdmLibDir,</span><br><span class="line">  kVendorLibDir,</span><br><span class="line">  nullptr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>This is generally speaking, where we would expect to find all the libraries needed, so utilizing <code>dlopen(&quot;libart&quot;)</code> seemingly would continue to work. Except now we can see that this is no longer where it is held;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beyond1q:/ # find / -name libart.so</span><br><span class="line">/system/apex/com.android.runtime.release/lib/libart.so</span><br><span class="line">/system/apex/com.android.runtime.release/lib64/libart.so</span><br></pre></td></tr></table></figure><h3 id="Fixing-our-shim"><a href="#Fixing-our-shim" class="headerlink" title="Fixing our shim"></a>Fixing our shim</h3><p>The dead simple fix would be to just ensure the correct path, depending on if the binary is 64 bit or not, is added to our <code>LD_LIBRARY_PATH</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beyond1q:/data/local/tmp # LD_LIBRARY_PATH=/system/apex/com.android.runtime.release/lib64/ ./shim ./libHelper.so</span><br></pre></td></tr></table></figure><p>While the above would suffice, it’s not exactly great. I’m pretty lazy and will easily forget this the next time around. So let’s make this programmatic which brings us to another minor issue. Prior to exploring this problem, I wasn’t positive you could change the <code>LD_LIBRARY_PATH</code> during execution. Technically, you can in a few different hacky ways, but we will actually opt for not modifying it on the fly, but just setting the variable if needed and re-executing ourselves correctly.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#if __aarch64__</span><br><span class="line">#define APEX_LIBRARY_PATH &quot;/apex/com.android.runtime/lib64/&quot;</span><br><span class="line">#else</span><br><span class="line">#define APEX_LIBRARY_PATH &quot;/apex/com.android.runtime/lib/&quot;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  char* path = getenv(&quot;LD_LIBRARY_PATH&quot;);</span><br><span class="line">  if(path == NULL || strstr(path, &quot;apex&quot;) == NULL) &#123;</span><br><span class="line">    if(setenv(&quot;LD_LIBRARY_PATH&quot;, APEX_LIBRARY_PATH, 1) != 0) &#123;</span><br><span class="line">      printf(&quot; [!] Error setting LD_LIBRARY_PATH via setenv!&quot;);</span><br><span class="line">      return -1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      printf(&quot; [+] Success setting env - reloading shim\n&quot;);</span><br><span class="line">      int rc = execv( &quot;/proc/self/exe&quot;, argv);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>The above snippet allows us to properly detect which path would be required to find <code>libart</code>, then looks to see if our path contains this already. If not, we set the environment we are currently running in and then re-execute ourselves via <code>execv</code> and retain the original arugments. This will transparently allow all <code>dlopen</code>, <code>dlsym</code>, etc, calls to work as originally intended and have the extra paths we need. This style of code isn’t anything ground shaking, however it took me a while to both track down the issue and figure out a programmatic way of tackling it.</p><p>The full commit can be found <a href="https://github.com/rednaga/native-shim/commit/c6e66d65f75f0febdb0b56f23fd29ea1aa83d6e8">here</a> for building locally.</p><p>Now viola! We can continue running the <code>native-shim</code> as we always have. Have fun doing more unpacking on newer systems.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Where-is-my-libart-at&quot;&gt;&lt;a href=&quot;#Where-is-my-libart-at&quot; class=&quot;headerlink&quot; title=&quot;Where is my libart at?&quot;&gt;&lt;/a&gt;Where is my libart at?</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    <category term="native-shim" scheme="https://strazzere.com/categories/android/reverse-engineering/native-shim/"/>
    
    <category term="shim" scheme="https://strazzere.com/categories/android/reverse-engineering/native-shim/shim/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="native-shim" scheme="https://strazzere.com/tags/native-shim/"/>
    
  </entry>
  
  <entry>
    <title>Android USB Accessory Sniffing</title>
    <link href="https://strazzere.com/2022/09/android-usb-accessories-and-frida/"/>
    <id>https://strazzere.com/2022/09/android-usb-accessories-and-frida/</id>
    <published>2022-09-27T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Using-a-Typescript-Frida-gadget-for-usb-debugging"><a href="#Using-a-Typescript-Frida-gadget-for-usb-debugging" class="headerlink" title="Using a Typescript Frida-gadget for usb debugging"></a>Using a Typescript Frida-gadget for usb debugging</h2><p>Recently on a project I was looking to do some “low level” analysis of between an application and a usb device plugged directly into the phone. This wasn’t anything I had ever actually done before, so it took a little bit of digging to figure out what was actually needed. On top of that, it had been a little bit since I had written a <code>frida</code> gadget. For the heck of it, I decided to just try and write everything in Typescript. Mostly this was a challenge to myself, but also an attempt to see if this would speed up any gadget writing in the future since it would allow me to rely on strong typing — or so I hoped.</p><h3 id="Boilerplate-gadget-code"><a href="#Boilerplate-gadget-code" class="headerlink" title="Boilerplate gadget code"></a>Boilerplate gadget code</h3><p><a href="https://github.com/oleavr">oleavr</a>, as always, was kind enough to have a good example of what a gadget should look like for <code>frida</code> which my code is based off of at <a href="https://github.com/oleavr/frida-agent-example">frida-agent-example</a>. The main benefit I’ve found to utilizing this approach is being able to have <code>VSCode</code> open on your project, the <code>watch</code> command running, and the interact repl for your agent also running. Between the typescript bindings and the repl, you can quickly debug and test while just saving a file and having everything recompile at once.</p><h3 id="Finding-the-Usb-Device"><a href="#Finding-the-Usb-Device" class="headerlink" title="Finding the Usb Device"></a>Finding the Usb Device</h3><p>While splunking in the Android docs, we can find that <a href="https://developer.android.com/reference/android/hardware/usb/UsbManager#openAccessory(android.hardware.usb.UsbAccessory)">android.hardware.usb.UsbAccessory.openAccessory()</a> is the likely method we will want to hook. Specifically from the docs;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ParcelFileDescriptor openAccessory (UsbAccessory accessory)</span><br><span class="line"></span><br><span class="line">Opens a file descriptor for reading and writing data to the USB accessory.</span><br></pre></td></tr></table></figure><p>So we will want to hook this, intercept the return value of type <code>ParcelFileDescriptor</code> then utilize the <a href="https://developer.android.com/reference/android/os/ParcelFileDescriptor#getFd()">getFd()</a> method. This means, based on the docs, from a hooking&#x2F;app perspective all the USB interaction is occuring transparently over a file descriptor. Great - so much like any type of file descriptor hooking, we only really care now about a few things;</p><ol><li>What is the file descriptor I care about</li><li>Hook the <code>read()</code> and <code>write()</code> methods and filter by the file descriptor.</li></ol><p>To perform this hooking in the gadget, we will use essentially the code below;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(() =&gt; &#123;</span><br><span class="line">  const usbManager = Java.use(&#x27;android.hardware.usb.UsbManager&#x27;)</span><br><span class="line">  usbManager.openAccessory.overload(&#x27;android.hardware.usb.UsbAccessory&#x27;).implementation = (usbAccessory: NativePointerValue) =&gt; &#123;</span><br><span class="line">    if (debug) &#123;</span><br><span class="line">      log(`usbManager.openAccessory(android.hardware.usb.UsbAccessory) called`)</span><br><span class="line">    &#125;</span><br><span class="line">    const ret = usbManager.openAccessory.call(this, usbAccessory)</span><br><span class="line">    const parcelFileDescriptor = Java.cast(ret, Java.use(&#x27;android.os.ParcelFileDescriptor&#x27;))</span><br><span class="line">    </span><br><span class="line">    log(`***** usb accessory FD : $&#123;parcelFileDescriptor&#125; $&#123;parcelFileDescriptor.getFd()&#125;`)</span><br><span class="line">    accessoryFD = parcelFileDescriptor.getFd()</span><br><span class="line">    return parcelFileDescriptor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Above the <code>accessoryFD</code> variable would just be something that is scoped to be accessible from other hooks we create later for the <code>read</code> and <code>write</code> functionality.</p><h3 id="Stitching-it-all-together"><a href="#Stitching-it-all-together" class="headerlink" title="Stitching it all together"></a>Stitching it all together</h3><p>For a <code>read</code> and <code>write</code> hook, all we need to do is a simple native <code>Interceptor.attach()</code> to <code>libc.so</code>, something like the following;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const libcWrite = Module.findExportByName(&#x27;libc.so&#x27;, &#x27;write&#x27;)</span><br><span class="line">if (libcWrite) &#123;</span><br><span class="line">  Interceptor.attach(</span><br><span class="line">    libcWrite, &#123;</span><br><span class="line">      onEnter: function(args) &#123;</span><br><span class="line">        if (accessoryFD &amp;&amp; args[0].toInt32() === accessoryFD) &#123;</span><br><span class="line">          const size = args[2].toInt32()</span><br><span class="line">          log(`* usb accessory write`)</span><br><span class="line">          log(hexdump(args[1], &#123; length: size &#125;))</span><br><span class="line">          log(Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#x27;\n&#x27;) + &#x27;\n&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const libcRead = Module.findExportByName(&#x27;libc.so&#x27;, &#x27;read&#x27;)</span><br><span class="line">if (libcRead) &#123;</span><br><span class="line">  Interceptor.attach(</span><br><span class="line">    libcRead, &#123;</span><br><span class="line">      onEnter: function(args) &#123;</span><br><span class="line">        this.fd = args[0].toInt32()</span><br><span class="line">        this.size = args[2].toInt32()</span><br><span class="line">      &#125;,</span><br><span class="line">      onLeave: function(ret) &#123;</span><br><span class="line">        if (accessoryFD &amp;&amp; this.fd.toInt32() === accessoryFD) &#123;</span><br><span class="line">          log(`* usb accessory read`)</span><br><span class="line">          log(hexdump(ret, &#123; length: this.size &#125;))</span><br><span class="line">          log(Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#x27;\n&#x27;) + &#x27;\n&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now from here on out we will be able to simply dump any of the “traffic” which is being sent to or received from the usb device. Blammo!</p><h3 id="Unsolved"><a href="#Unsolved" class="headerlink" title="Unsolved"></a>Unsolved</h3><p>In my example code which is linked below, I was able to define and track down all the proper types, except for one. While utilizing a <code>java.lang.Thread</code> to generate stacktraces - which is something I often to do to highlight “where” in the code some function is called, it is annoyingly hard to figure out how to type this object.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// eslint-disable-next-line @typescript-eslint/ban-types</span><br><span class="line">let threadObj: Java.Wrapper&lt;&#123;&#125;&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">      const ThreadDef = Java.use(&#x27;java.lang.Thread&#x27;)</span><br><span class="line">      threadObj = ThreadDef.$new()</span><br></pre></td></tr></table></figure><p>While the typescript compiler itself doesn’t seem to have any issues with this (which might be a misnomer since it is <code>frida-compile</code> doing some of the lifting?) the linter hates this throwing the following error;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/home/diff/repo/rednaga/android/usb-accessory-gadget/agent/index.ts</span><br><span class="line">  4:29  error  Don&#x27;t use `&#123;&#125;` as a type. `&#123;&#125;` actually means &quot;any non-nullish value&quot;.</span><br><span class="line">- If you want a type meaning &quot;any object&quot;, you probably want `Record&lt;string, unknown&gt;` instead.</span><br><span class="line">- If you want a type meaning &quot;any value&quot;, you probably want `unknown` instead.</span><br><span class="line">- If you want a type meaning &quot;empty object&quot;, you probably want `Record&lt;string, never&gt;` instead  @typescript-eslint/ban-types</span><br></pre></td></tr></table></figure><p>Which, to be honest, I’m not sure I fully understand. Obviously it wants a proper type, though none of those seem correct.</p><p>The autogenerated documents seem to indicate that this is the actual return value, so I’m pretty unclear on what is happening here.<br><code>function Java.use&lt;&#123;&#125;&gt;(className: string): Java.Wrapper&lt;&#123;&#125;&gt;</code></p><p>If anyone has ever solved for this, I’d be curious what the solution ends up being.</p><h3 id="TLDR-Give-me-the-code"><a href="#TLDR-Give-me-the-code" class="headerlink" title="TLDR - Give me the code"></a>TLDR - Give me the code</h3><p>A fully working example to dump <code>read</code> and <code>writes</code> between an Android APK and a USB device can be found in this repository, <a href="https://github.com/strazzere/usb-accessory-gadget">usb-accessory-gadget</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Using-a-Typescript-Frida-gadget-for-usb-debugging&quot;&gt;&lt;a href=&quot;#Using-a-Typescript-Frida-gadget-for-usb-debugging&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    <category term="frida" scheme="https://strazzere.com/categories/android/reverse-engineering/frida/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="frida" scheme="https://strazzere.com/tags/frida/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="usb accessories" scheme="https://strazzere.com/tags/usb-accessories/"/>
    
    <category term="typescript" scheme="https://strazzere.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Uncertified Devices and Bad Advice</title>
    <link href="https://strazzere.com/2020/06/Uncertified-Devices-and-Bad-Advice/"/>
    <id>https://strazzere.com/2020/06/Uncertified-Devices-and-Bad-Advice/</id>
    <published>2020-06-07T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Emulators-with-official-apps"><a href="#Emulators-with-official-apps" class="headerlink" title="Emulators with official apps"></a>Emulators with official apps</h2><p>Nothing new about folks wanting to have emulators which look like real devices. This has been a want that has been around for a while, and a wildly helpful project is the <a href="https://opengapps.org/">OpenGapps Project</a> which will build these apps for you and assist in getting the installed and set up. Though upon doing this, you’ll often see some crashes and the following screens;</p><p><img src="/images/action-required.png" alt="Annoying"></p><p>Annoying, right? Of course this isn’t certified, but whatever - let’s just bypass this by registering our device at the link provided <a href="https://www.google.com/android/uncertified/">https://www.google.com/android/uncertified/</a> which looks like the following;<br><img src="/images/directions.png" alt="Seems reasonable"></p><h2 id="Adding-a-Uncertified-Device-to-an-exception-list"><a href="#Adding-a-Uncertified-Device-to-an-exception-list" class="headerlink" title="Adding a Uncertified Device to an exception list"></a>Adding a Uncertified Device to an exception list</h2><p>The wordage on this page recently changed, it appears about a month ago, to now have those explicit instructions. Looking at them, it’s unclear to me if these could ever work on a device;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb root</span><br><span class="line">$ adb shell &#x27;sqlite3 /data/data/com.google.android.gsf/databases/gservices.db \ </span><br><span class="line">    &quot;select * from main where name = &quot;android_id&quot;;&quot;&#x27;</span><br></pre></td></tr></table></figure><p>Most custom roms aren’t just plain emulators with root enabled, this won’t work at all, as you don’t inherently have <code>adb</code> with <code>root</code> access. Whatever, likely just a silly assumption, and since we are using an emulator with root we don’t really care right now. The latter part is more interesting and confusing. If we reduce it to one line can you see what’s likely going to (not) happen?</p><p><code>adb shell &#39;sqlite3 /data/data/com.google.android.gsf/databases/gservices.db &quot;select * from main where name = &quot;android_id&quot;;&quot;&#39;</code></p><p>Ok, so, your shell is going to run <code>adb shell &#39;pipe whatever this command is to the devices shell&#39;</code>, right?</p><p>Then the <code>sqlite3 /data/data/com.google.android.gsf/databases/gservices.db &quot;select * from main where name = &quot;android_id&quot;;&quot;</code> part is going to run the <code>sqlite3</code> command pass in an argument for the file, <code>/data/data/com.google.android.gsf/databases/gservices.db</code> and then a query, quoted so that it won’t be parsed as multiple arguments <code>&quot;select * from main where name = &quot;android_id&quot;;&quot;</code>.</p><p>Except that last bit, seems horribly wrong? The output from running this on a (relatively) stock emulator will net the following;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell &#x27;sqlite3 /data/data/com.google.android.gsf/databases/gservices.db &quot;select * from main where name = &quot;android_id&quot;;&quot;&#x27;</span><br><span class="line">Error: no such column: android_id</span><br></pre></td></tr></table></figure><p>Note the error, <code>no such column: android_id</code>, even though that SQL is not attempting to use <code>android_id</code> as a column, this is meant to be the key, <code>name</code> is the column we’re meant to be pivoting on.</p><h2 id="Simple-fix"><a href="#Simple-fix" class="headerlink" title="Simple fix"></a>Simple fix</h2><p>So the fix should be obvious, escape the key name and keep the SQL from getting broken up</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell &#x27;sqlite3 /data/data/com.google.android.gsf/databases/gservices.db &quot;select * from main where name = \&quot;android_id\&quot;;&quot;&#x27;</span><br><span class="line">android_id|437766DEADBEEF7953</span><br></pre></td></tr></table></figure><p>Nothing overly complicated, obviously, though it can be annoying when good instructions&#x2F;directions are changed to things that won’t work out of the box. Maybe more proof reading next time, though not like I do that, this post is likely riddled with errors or maybe this only affected my own set ups? Oh well I guess?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Emulators-with-official-apps&quot;&gt;&lt;a href=&quot;#Emulators-with-official-apps&quot; class=&quot;headerlink&quot; title=&quot;Emulators with official apps&quot;&gt;&lt;/a&gt;Em</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    <category term="emulator" scheme="https://strazzere.com/categories/android/reverse-engineering/emulator/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="reverse-engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="emulator" scheme="https://strazzere.com/tags/emulator/"/>
    
  </entry>
  
  <entry>
    <title>Tales from the crash; dlopen() and dlerror() patterns</title>
    <link href="https://strazzere.com/2020/05/Tales-from-the-crash-dlopen-and-dlerror/"/>
    <id>https://strazzere.com/2020/05/Tales-from-the-crash-dlopen-and-dlerror/</id>
    <published>2020-05-17T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-setup"><a href="#The-setup" class="headerlink" title="The setup"></a>The setup</h2><p>Recently, while attacking a unspecified application, I had the need to do something I consider pretty normal. Hook <code>dlopen()</code> and <code>dlsym()</code> and inject some results for instrumenting what the application believes should be going on. Annoyingly, the way the application worked was to load an annoying amount of shared libraries. The majority of these libraries had been protected with some unknown obfuscators and a packer – so replicating the environment in isolation would be very tedious. My normal pattern in a simplistic case would be just to use the <a href="https://github.com/rednaga/native-shim">native-shim</a> – it’s easy, works and gives you a clean “JVM” to work with. Though due to all the re-injections and checks inside protected binaries, the JVM would need to be prepopulated with too much dalvik non-sense. So the obvious solution? Use <a href="frida.re">Frida</a> (or some other generic hooking framework I guess?)!</p><p>Very simplistically, I needed to hook <code>dlopen()</code> to watch for a specific shared library, which after some static analysis, appeared to only introduce anti-debugging tricks. After the <code>dlopen()</code> is called, the main loader would then <code>dlsym()</code> some functions and check to see if they exist, call then and check the return values. So basically, the underlying deobfuscated code likely looked like this;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bool beingDebuged() &#123;</span><br><span class="line">    void *handle;</span><br><span class="line">    bool (* antiFunction1)(void);</span><br><span class="line">    bool (* antiFunction2)(void);</span><br><span class="line">    bool (* antiFunction3)(void);</span><br><span class="line">    bool (* antiFunction4)(void);</span><br><span class="line"></span><br><span class="line">    handle = dlopen (&quot;libantidebugstuff.so&quot;, RTLD_LAZY);</span><br><span class="line">    if (!handle) &#123;</span><br><span class="line">        fputs (&quot;Error initializing antidebug!&quot;, stderr);</span><br><span class="line"></span><br><span class="line">        // library seemed to assume if antidebugging fails to load,</span><br><span class="line">        // that it&#x27;s probably being debugged</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    antiFunction1 = dlsym(handle, &quot;antiFunction1&quot;);</span><br><span class="line">    if (antiFunction1 == NULL)  &#123;</span><br><span class="line">        fputs(&quot;Error getting antiFunction1!&quot;, stderr);</span><br><span class="line"></span><br><span class="line">        // Same as above</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // .. get other functions, etc</span><br><span class="line"></span><br><span class="line">    return ((*antiFunction1)() &amp;&amp; </span><br><span class="line">        (*antiFunction2)() &amp;&amp; </span><br><span class="line">        (*antiFunction3)() &amp;&amp; </span><br><span class="line">        (*antiFunction4)())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above is not the actual code – it was more complex and interweaved throughout the application making it a bit more annoying to solve holistically. If it where the above code, we could just replace the whole bit with a simple NOP function or something. We also had a secondary goal of figuring out where&#x2F;when&#x2F;why these calls had been getting triggered.</p><p>In the simplified above example though, can you see what might go wrong with this code? There is an edge case here which is sort of an odd one, that I can only really imagine happening when reverse engineering. Though, dependant on how this code interacts, could potentially reproduce if this code essential for the application to run and fails silently.</p><h2 id="There-was-an-attempt…"><a href="#There-was-an-attempt…" class="headerlink" title="There was an attempt…"></a>There was an attempt…</h2><p>So without much thought I simply just sketched out some a simplistic frida function hook per usual and injected it. A gadget was injected into the APK and a handful of files had been stripped out, different ABIs and the antidebug library since we didn’t want it mucking around with any of the memory. If they wanted to open the targeted antidebug library, we would just return a fake handle so it won’t error out, then catch that fake handle and return my <a href="https://strazzere.com/2020/05/making-up-frida-functions/">fake functions</a> for the application to call. That could let us trap the functions or get stacktraces to see where&#x2F;when it was being utilized;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">var cookie = 0xd1ffd1ff;</span><br><span class="line"></span><br><span class="line">Interceptor.attach(Module.findExportByName(null, &#x27;dlopen&#x27;), &#123;</span><br><span class="line">    onEnter: function(args) &#123;</span><br><span class="line">        this.path = Memory.readUtf8String(args[0]);</span><br><span class="line">        this.mode = args[1]);</span><br><span class="line">     &#125;,</span><br><span class="line">    onLeave: function(retval) &#123;</span><br><span class="line">        console.log(&quot;dlopen(&quot; + &quot;path=\&quot;&quot; + Memory.readUtf8String(path) + &quot;\&quot;&quot; + &quot;, mode=&quot; + mode + &quot;)&quot;);</span><br><span class="line">        if (name !== null &amp;&amp; name.endsWith(&#x27;libantidebugstuff.so&#x27;)) &#123;</span><br><span class="line">            retval.replace(cookie)</span><br><span class="line">        &#125;</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Interceptor.attach(Module.findExportByName(null, &#x27;dlsym&#x27;), &#123;</span><br><span class="line">    onEnter: function(args) &#123;</span><br><span class="line">        this.handle = args[0];</span><br><span class="line">        this.name = Memory.readUtf8String(args[1]);</span><br><span class="line">     &#125;,</span><br><span class="line">    onLeave: function(retval) &#123;</span><br><span class="line">        if(this.handle == cookie) &#123;</span><br><span class="line">            console.log(&quot;dlsym(&quot; + &quot;handle=\&quot;&quot; + this.handle + &quot;\&quot;&quot; + &quot;, name=&quot; + this.name + &quot;) ret : &quot;, retval);</span><br><span class="line">            switch(this.name) &#123;</span><br><span class="line">                case &#x27;antiFunction1&#x27;:</span><br><span class="line">                    retval.replace(antiFunction1);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;antiFunction2&#x27;:</span><br><span class="line">                    retval.replace(antiFunction2);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;antiFunction3&#x27;:</span><br><span class="line">                    retval.replace(antiFunction3);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;antiFunction4&#x27;:</span><br><span class="line">                    retval.replace(antiFunction4);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    console.log(&quot;Don&#x27;t know how to handle requested function : &quot;, this.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Fire it up - worked fine. Tweaked a few things, it crashes. Wait, what? NPE in some unrelated library for the system? This didn’t make sense. Fire it up again with changes removed, breaks again. Except the NPE is somewhere else. What. The. Crap.</p><p>Figured it out yet? It took me a while to understand two things. The original code I was injecting against has a bad a pattern in it (which seems surprisingly common?) and I also chose a poor way to interact with this function.</p><h2 id="The-bad-pattern"><a href="#The-bad-pattern" class="headerlink" title="The bad pattern"></a>The bad pattern</h2><p>So, per <code>dlopens())</code>, the return value will be <code>NULL</code> if it fails;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">On  success,  dlopen() and dlmopen() return a non-NULL handle for the loaded library.  On error (file could not be found, was not readable,</span><br><span class="line">had the wrong format, or caused errors during loading), these functions return NULL.</span><br><span class="line"></span><br><span class="line">On success, dlclose() returns 0; on error, it returns a nonzero value.</span><br><span class="line"></span><br><span class="line">Errors from these functions can be diagnosed using dlerror(3).</span><br></pre></td></tr></table></figure><p>This makes sense, and it looks like both the original author and I are covering for this case.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">handle = dlopen (&quot;libantidebugstuff.so&quot;, RTLD_LAZY);</span><br><span class="line">if (!handle) &#123;</span><br></pre></td></tr></table></figure><p>The above code will error if <code>NULL</code>, perfect.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.attach(Module.findExportByName(null, &#x27;dlopen&#x27;), &#123;</span><br><span class="line">    onEnter: function(args) &#123;</span><br><span class="line">        this.path = Memory.readUtf8String(args[0]);</span><br><span class="line">        this.mode = args[1]);</span><br><span class="line">     &#125;,</span><br><span class="line">    onLeave: function(retval) &#123;</span><br><span class="line">        console.log(&quot;dlopen(&quot; + &quot;path=\&quot;&quot; + Memory.readUtf8String(path) + &quot;\&quot;&quot; + &quot;, mode=&quot; + mode + &quot;)&quot;);</span><br><span class="line">        if (name !== null &amp;&amp; name.endsWith(&#x27;libantidebugstuff.so&#x27;)) &#123;</span><br><span class="line">            retval.replace(cookie)</span><br><span class="line">        &#125;</span><br><span class="line">        return retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In the interceptor code, we will catch the <code>retval</code>, which will be <code>NULL</code> as we’ve removed the file and it won’t be found. We then change the <code>retval</code> to not be <code>NULL</code> and the program will be happen and continue it’s execution. Everyone is great, right? Nope, we made a decently sized mistake in some assuming here…</p><p>It would appear, that we spaced out about <code>dlerror()</code>, as did the original author (maybe?). The man page of <code>dlopen</code> even told us about it above;</p><p><code>Errors from these functions can be diagnosed using dlerror(3).</code></p><p>Oh yea, if we let the <code>dlopen</code> function actually get called, a <code>dlerror()</code> will be set, and remain until someone asks for it. This didn’t cross my mind originally as the original author wasn’t using it, so big deal, right? Sadly, no - this was the whole source of the error. By utilizing <code>Interceptor.attach()</code> we’re merely hooking <em>before</em> and <em>after</em> the function call. As <code>libantidebugstuff.so</code> no longer exists, this means the <code>dlerror()</code> call will return a file not found error. Since there was no gating used done by the original author or us based on a <code>dlerror()</code> this will just persist until someone asks for it, wrongly consuming this error as their own. Thus downstream issues which libraries never expected.</p><h2 id="Fixing-the-issue"><a href="#Fixing-the-issue" class="headerlink" title="Fixing the issue"></a>Fixing the issue</h2><p>So for our intercepting of the functions to be fixed, we need to replace our <code>attach()</code> call with a <code>replace()</code> call, then we can choose if we want to call the true underlying function. Alternatively you could consume the <code>dlerror()</code> instead, but this feels “wrong” to me.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var cookie = 0xd1ffd1ff;</span><br><span class="line">var dlopen = new NativeFunction(Module.findExportByName(null, &#x27;dlopen&#x27;), &#x27;pointer&#x27;, [&#x27;pointer&#x27;, &#x27;int&#x27;]);</span><br><span class="line">Interceptor.replace(dlopen, new NativeCallback(function(path, mode) &#123;</span><br><span class="line">    console.log(&quot;dlopen(&quot; + &quot;path=\&quot;&quot; + Memory.readUtf8String(path) + &quot;\&quot;&quot; + &quot;, mode=&quot; + mode + &quot;)&quot;);</span><br><span class="line">    var name = Memory.readUtf8String(path);</span><br><span class="line">    if (name !== null &amp;&amp; name.endsWith(&#x27;libantidebugstuff.so&#x27;)) &#123;</span><br><span class="line">        console.log(&quot;[*] Found the call to libantidebugstuff, replacing with our cookie and not calling dlopen&quot;);</span><br><span class="line">        return new NativePointer(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">    return dlopen(path, mode);</span><br><span class="line">&#125;, &#x27;pointer&#x27;, [&#x27;pointer&#x27;, &#x27;int&#x27;]));</span><br></pre></td></tr></table></figure><p>After replacing the original <code>dlopen()</code> hook with the above code, it all worked fine and the random NPEs which had been racing each other, all disappeared.</p><p>This sort of had me thinking about <code>dlerror()</code> though and the “proper usage” of it. Generally speaking, I guess most usecases would be sort of fine to ignore this function and just rely on the <code>NULL</code> being returned. Though this seems like it could cause poor results in a complex binary <em>especially if</em> a failed <code>dlopen()</code> in your application is considered not fatal. For this targeting application, it just considered any type of failure to be that the application is being debugged. However, this wouldn’t cause the application to exit by design, though it would crash as other parts of the system pick up the <code>dlerror()</code>. So in this case, maybe no one would care?</p><p>Regardless, it would seem the “safest” form of usage for a <code>dlopen()</code> or <code>dlsym()</code> call that is allowed to fail would be something like;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">char *error;</span><br><span class="line"></span><br><span class="line">handle = dlopen (&quot;libantidebugstuff.so&quot;, RTLD_LAZY);</span><br><span class="line">if ((error = dlerror()) != NULL) &#123;</span><br><span class="line">    fputs (error, stderr);</span><br><span class="line"></span><br><span class="line">    // library seemed to assume if antidebugging fails to load,</span><br><span class="line">    // that it&#x27;s probably being debugged</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">antiFunction1 = dlsym(handle, &quot;antiFunction1&quot;);</span><br><span class="line">if ((error = dlerror()) != NULL)  &#123;</span><br><span class="line">    fputs(error, stderr);</span><br><span class="line"></span><br><span class="line">    // Same as above</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above snippet will properly gate in the a similar manner as before, but also prevent an issue where <code>dlerror()</code> could return a value to another function.</p><h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><p>Don’t let functions you know will fail, fail, when reversing. Seems obvious, though sometime when you’re reversing in smaller target it doesn’t matter. Hopefully this is mildly interesting to folks as it annoyed me for a day or so trying to figure out what was going on.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;The-setup&quot;&gt;&lt;a href=&quot;#The-setup&quot; class=&quot;headerlink&quot; title=&quot;The setup&quot;&gt;&lt;/a&gt;The setup&lt;/h2&gt;&lt;p&gt;Recently, while attacking a unspecified ap</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    <category term="coding" scheme="https://strazzere.com/categories/android/reverse-engineering/coding/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="frida" scheme="https://strazzere.com/tags/frida/"/>
    
    <category term="reverse-engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
  </entry>
  
  <entry>
    <title>Quick n dirty, check for Android binaries</title>
    <link href="https://strazzere.com/2020/05/quick-n-dirty-check-for-android-binaries/"/>
    <id>https://strazzere.com/2020/05/quick-n-dirty-check-for-android-binaries/</id>
    <published>2020-05-09T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.095Z</updated>
    
    <content type="html"><![CDATA[<p>Annoyingly, unless you’re at a large AV shop or happen to work a place running one of the stores, maintaining a good repository of Android binaries can sometimes be tricky. Most options folks have are either outrageously priced (Virustotal), extremely limited to the number of downloads (apklab?) or you’re likely just feeding other peoples intel programs (all of them?). So what is a simple reverser meant to do?</p><p>Beg, borrow and steal. Many of the aforementioned services do slowly trickle things out - usually limiting downloads or searches to ~10 a day. Some you can gain access to by sharing the right intel with the right people. Though, something I’ve found relatively interesting and useful lately was just simply using <a href="https://www.apkmirror.com/">APKMirror</a>. Though, using them is obvious, right? Except it isn’t exactly set up for a simplistic download or search. Except, the owners did seem to place in a nice little API call which can be very useful.</p><p>Before you burn a download from one of those coveted sources, hit APKMirror’s upload API and see if the md5 is available;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl &#x27;https://www.apkmirror.com//wp-json/apkm/v1/apk_uploadable/098822a8624f7fd5e9ddb4c82c6f986c&#x27; \</span><br><span class="line">  -H &#x27;authority: www.apkmirror.com&#x27; \</span><br><span class="line">  -H &#x27;pragma: no-cache&#x27; \</span><br><span class="line">  -H &#x27;cache-control: no-cache&#x27; \</span><br><span class="line">  -H &#x27;dnt: 1&#x27; \</span><br><span class="line">  -H &#x27;upgrade-insecure-requests: 1&#x27; \</span><br><span class="line">  -H &#x27;user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36&#x27; \</span><br><span class="line">  -H &#x27;accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27; \</span><br><span class="line">  -H &#x27;sec-fetch-site: none&#x27; \</span><br><span class="line">  -H &#x27;sec-fetch-mode: navigate&#x27; \</span><br><span class="line">  -H &#x27;sec-fetch-dest: document&#x27; \</span><br><span class="line">  -H &#x27;accept-language: en-US,en;q=0.9&#x27; \</span><br><span class="line">  --compressed</span><br></pre></td></tr></table></figure><p>Since they’re sitting behind Cloudflare, thus their WAF, you’ll need to keep the bulk of those junk headers to avoid curl getting blocked. Simply drop this isn’t whatever script or language you need. The return, is even better;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;md5&quot;: &quot;098822a8624f7fd5e9ddb4c82c6f986c&quot;,</span><br><span class="line">  &quot;status&quot;: &quot;dupe&quot;,</span><br><span class="line">  &quot;link&quot;: &quot;https://www.apkmirror.com/apk/snap-inc/snapchat/snapchat-10-80-0-0-release/snapchat-10-80-0-0-2-android-apk-download/&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;Snapchat 10.80.0.0 (arm64-v8a) (nodpi) (Android 4.4+)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A nicely formed json blob which will give you what the file is and where to go look for the binary. Personally, I suggest not really abusing this, even though most of the bandwidth is probably just CF’s getting soaked up do to cached binaries. As a nifty little note, it appears either OpenGAPPS was told about this, or figured it out themselves, as we can see this <a href="https://github.com/opengapps/opengapps/pull/402/files/d77ec0770372efd4e84a3636df45668134a351c7">pull request from their repo</a>, indicating that this was known since at least 2016;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for apk in $newapks; do</span><br><span class="line">    if $(curl -s -S -A &quot;OpenGAppsUploader&quot; &quot;https://www.apkmirror.com/wp-json/apkm/v1/apk_uploadable/$(md5sum &quot;$apk&quot; | cut -f 1 -d &#x27; &#x27;)&quot; | grep -q &quot;uploadable&quot;); then</span><br><span class="line">        echo &quot;Uploading $apk to APKmirror.com...&quot;</span><br><span class="line">        filename=&quot;$(basename &quot;$apk&quot;)&quot;</span><br><span class="line">        curl -s -S -A &quot;OpenGAppsUploader&quot; -X POST -F &quot;fullname=$name (OpenGApps.org)&quot; -F &quot;email=$email&quot; -F &quot;changes=&quot; -F &quot;file=@$apk;filename=$filename&quot; &quot;https://www.apkmirror.com/wp-content/plugins/UploadManager/inc/upload.php&quot; &gt; /dev/null</span><br><span class="line">    else</span><br><span class="line">        echo &quot;Skipping $apk, already exists on APKmirror.com...&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Annoyingly, unless you’re at a large AV shop or happen to work a place running one of the stores, maintaining a good repository of Androi</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="osint" scheme="https://strazzere.com/tags/osint/"/>
    
    <category term="crawling" scheme="https://strazzere.com/tags/crawling/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Making up&quot; functions in Frida</title>
    <link href="https://strazzere.com/2020/05/making-up-frida-functions/"/>
    <id>https://strazzere.com/2020/05/making-up-frida-functions/</id>
    <published>2020-05-08T07:00:00.000Z</published>
    <updated>2024-06-18T21:20:59.093Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I had the need to generically hook some functions which I didn’t actually want a target binary to load. You can think of this as, a shared library which was expecting another shared library to also exist, then utilize some functions from it. The amount of functions it was going to use, approximately ~1k, would have been really annoying for me to manually stub out.</p><p>Anyway, regardless of the purpose, I ran into a need to “create” a “new” function so that I could hook it or modify it. Originally I expected that I might just be able to use an allocated blob of memory, which would return the type of <code>NativePointer</code>, however this is not a “hookable” address in memory it would appear.</p><p>This simple solution to this was to allocate memory, then used <code>MemoryPatcher</code>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// Allocate memory inside the </span><br><span class="line">var stubFunc = Memory.alloc(Process.pageSize);</span><br><span class="line"></span><br><span class="line">// Patch the &quot;function&quot; with some basic instructions</span><br><span class="line">Memory.patchCode(stubFunc, Process.pageSize, function (code) &#123;</span><br><span class="line">    if(Process.arch.includes(&quot;arm64&quot;)) &#123;</span><br><span class="line">        var cw = new Arm64Writer(code, &#123; pc: stubFunc &#125;);</span><br><span class="line">        cw.putLabel(&#x27;done&#x27;);</span><br><span class="line">        cw.putRet();</span><br><span class="line">        cw.flush();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var cw = new ArmWriter(code, &#123; pc: stubFunc &#125;);</span><br><span class="line">        cw.putLabel(&#x27;done&#x27;);</span><br><span class="line">        cw.putRet();</span><br><span class="line">        cw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>By doing the above, we’re giving both Frida and the targetted application a “function” which can now be called and does nothing. So, in theory you could modify the above to return a value, do actual work or whatever in arm&#x2F;arm64 code, or just pass the pointer back to the application and hook it in Frida like the following;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.attach(stubFunc, &#123;</span><br><span class="line">    onEnter: function(args) &#123;</span><br><span class="line">        console.log(&quot; &gt;&gt; stubFunc onEnter&quot;);</span><br><span class="line">        // You can access the args being sent here from the targetted application</span><br><span class="line">     &#125;,</span><br><span class="line">    onLeave: function(retval) &#123;</span><br><span class="line">        // Or do work here and return whatever value</span><br><span class="line">        retval.replace(0xd1ff)</span><br><span class="line">        console.log(&quot; &gt;&gt; stubFunc onLeave : &quot;, retval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Using this pattern, we can now mock out different non-existant or blocked libraries. This can be useful for removing obfuscated, protected or just annoying code.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently I had the need to generically hook some functions which I didn’t actually want a target binary to load. You can think of this as</summary>
      
    
    
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/reverse-engineering/"/>
    
    <category term="android" scheme="https://strazzere.com/categories/reverse-engineering/android/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="frida" scheme="https://strazzere.com/tags/frida/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
  </entry>
  
  <entry>
    <title>Housekeeping: blog converted!</title>
    <link href="https://strazzere.com/2020/03/housekeeping-blog-converted/"/>
    <id>https://strazzere.com/2020/03/housekeeping-blog-converted/</id>
    <published>2020-03-29T22:30:06.000Z</published>
    <updated>2024-06-18T21:20:59.092Z</updated>
    
    <content type="html"><![CDATA[<p>It only took a countless amount of years along with a pandemic, apparently, in order to get me in gear and clean up the blog. This has been on a forever long “todo” list, which never really had any likelyhood of getting addresses. Though, after paying the Rackspace bill for my ancient, extremely grandfathered, $5 vps, I figued - why not? Let’s convert all this stuff over to markdown and be done with it.</p><p>Well, here it is - in somehow, an uglier form than it was before. Oh well, it’s free, it’s on github and now that it <em>isn’t</em> wordpress, maybe I’ll write some more things.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It only took a countless amount of years along with a pandemic, apparently, in order to get me in gear and clean up the blog. This has be</summary>
      
    
    
    
    <category term="life" scheme="https://strazzere.com/categories/life/"/>
    
    
    <category term="life" scheme="https://strazzere.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Follow up on Android LKMs</title>
    <link href="https://strazzere.com/2014/07/follow-up-on-android-lkms/"/>
    <id>https://strazzere.com/2014/07/follow-up-on-android-lkms/</id>
    <published>2014-07-25T04:30:35.000Z</published>
    <updated>2024-06-18T21:20:59.090Z</updated>
    
    <content type="html"><![CDATA[<p>As promised, I’ve posted a few Android LKMs over on github just now. Hopefully as time allows I’ll be able to commit more of my LKMs, however for the time being only two are ready to see the light of day.</p><p>One of them is a simple anti-ptracer LKM which is mainly grafted from old code I remember seeing in a zine somewhere, at some point in time. It’s very old at this point but was useful in dealing with something that using ptrace in an odd fashion. The bulk of this is dropped into this directory <a href="https://github.com/strazzere/android-lkms/tree/master/antiptrace">https://github.com/strazzere/android-lkms/tree/master/antiptrace</a> - hopefully with just a little modification to the Makefile, you can have it compiling in no time.</p><p>The second was an attempt to do <code>LD_PRELOAD</code> like hooking just to test the results. To be blunt, the results where not very good and it was a bad idea to do this many things in the kernel as it slowed the emulator down quiet a bit. Though, I figured it might be useful for someone to view and get some ideas. I was targeting a specific process and while the end result did not end up being that great - it did help me realize what files where being touched and when in the set up process. The bulk of this code is found at <a href="https://github.com/strazzere/android-lkms/tree/master/open-read-write">https://github.com/strazzere/android-lkms/tree/master/open-read-write</a>.</p><p>None of this is ground breaking or relatively new. However, in trying to get these example to work a while back, I found most of the articles online about LKMs to be great for the theory but contains unusable code and instructions. Hopefully these examples can give people a more clear indication of specifically how to get LKMs working for Android emulators.<br>On a bit of a specific note, lots of LKM chatter is about rootkiting devices and how to get the <code>SYS_CALL_TABLE</code>. I’ve avoid that as I’m working under the assumption that I’ve compiled the kernel myself and knowingly have root access to enable these LKMs. For this purpose I use a simple sed script to grab the address and inject it into the header files. The other articles online have plenty of suggestions on how to do this dynamically, most still work - I just didn’t care to have that bloat in my code as it was unnecessary for my setup.</p><p>Originally posted as a comment to this post, pre-migration away from WordPress, Collin Mulliner mentioned, “this is what I use, not too much bloat 🙂”; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static unsigned long **get_sys_call_table(void) &#123;</span><br><span class="line">#ifdef CONFIG_MIPS</span><br><span class="line">  return 0x8006a770;</span><br><span class="line">#else</span><br><span class="line">  unsigned long int offset = PAGE_OFFSET;</span><br><span class="line">  unsigned long **sct;</span><br><span class="line"></span><br><span class="line">  while (offset &lt; ULLONG_MAX) &#123;</span><br><span class="line">    sct = (unsigned long **)offset;</span><br><span class="line">    if (sct[__NR_close] == (unsigned long *) sys_close)</span><br><span class="line">      return sct;</span><br><span class="line">    offset += sizeof(void *);</span><br><span class="line">  &#125;</span><br><span class="line">  return NULL;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;As promised, I’ve posted a few Android LKMs over on github just now. Hopefully as time allows I’ll be able to commit more of my LKMs, how</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="coding" scheme="https://strazzere.com/categories/android/coding/"/>
    
    
  </entry>
  
  <entry>
    <title>Compiling an Android Emulator Kernel for Loadable Kernel Modules</title>
    <link href="https://strazzere.com/2014/07/compiling-an-emulator-kernel-for-loadable-modules/"/>
    <id>https://strazzere.com/2014/07/compiling-an-emulator-kernel-for-loadable-modules/</id>
    <published>2014-07-21T03:47:39.000Z</published>
    <updated>2024-06-18T21:20:59.088Z</updated>
    
    <content type="html"><![CDATA[<p>So you want to rootkit the emulator? These are rough notes I took while attempt to get this working on my own machine (OSX 10.8.5) - results may vary. According to random posts I’ve seen, OSX is a bit finicky and no one really gets it to work right - Ubuntu everything is apparently just peachy. You’ve been warned though, YMMV.<br><em>If on OSX, you must install libelf - this was the only dependency I was missing. If you don’t have this the build will randomly fail and not be exceptionally helpful about why.</em><br><strong>Building the Kernel</strong><br>Clone emulator kernel directory then get the branch of the kernel we want</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://android.googlesource.com/kernel/goldfish</span><br><span class="line">...</span><br><span class="line">cd goldfish</span><br><span class="line">git checkout -t origin/android-goldfish-2.6.29 -b goldfish</span><br></pre></td></tr></table></figure><p>Before we build the kernel we must configure it, though we don’t want the default configuration (this doesn’t actually let the emulator boot) and we want to ensure LKM support is present. Note that the feature to load is seperate from the unload feature, you must enable both. Let’s first copy the configuration for <code>goldfish_armv7_defconfig</code>. Then manually change the LKM state (<code>goldfish_armv7_defconfig</code> will default to having modules enabled and loadable, but not unloadable) to any features we need.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm goldfish_armv7_defconfig ...</span><br><span class="line">make ARCH=arm menuconfig</span><br></pre></td></tr></table></figure><p>If you are compiling on OSX, you will want to manually edit the <code>.config</code> file to not include <code>CONFIG_NETFILTER</code>, simply comment this line out before proceeding. You will be prompted to confirm this change prior to compiling as well. If you do not make this change you’ll see an issue similar to this appear;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make[2]: *** No rule to make target \`net/netfilter/xt_CONNMARK.o&#x27;, needed by \`net/netfilter/built-in.o&#x27;. Stop.</span><br><span class="line">make[1]: *** [net/netfilter] Error 2</span><br><span class="line">make: *** [net] Error 2</span><br></pre></td></tr></table></figure><p>Compile the kernel, modify the <code>CROSS_COMPILE</code> switch as necessary for your builders setup;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm SUB_ARCH=arm CROSS_COMPILE=$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin/arm-linux-androideabi-</span><br></pre></td></tr></table></figure><p>If you are unsure where to point <em>CROSS_COMPILE</em>, you can try below to help narrow it down, assuming you have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ANDROID_NDK_ROOT set;</span><br><span class="line">find $ANDROID_NDK_ROOT | grep &#x27;\\-gcc$&#x27;</span><br></pre></td></tr></table></figure><p><strong>Making the Emulator use the Newly Compiled Kernel</strong><br>The easiest way to use the kernel immediately is to just point an already existing AVD image at it via the emulator command;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -kernel arch/arm/boot/zImage -avd -verbose</span><br></pre></td></tr></table></figure><p>You don’t need -verbose, obviously, though it would be helpful the first time to watch for the potential segfault or if the kernel image was bad. If the “android” doesn’t appear in the emulator box and nothing is streaming to the console, you likely borked one of the above steps. You should try to enable the “Use Host GPU” setting for the avd as well, since this appears to drastically improve performance of the emulator for most MacBook Pros. Another potential way to use the kernel is to copy the kernel from <code>arch/arm/boot/zImage</code> into one of your platforms, this will cause all AVDs using that platform to use the customer kernel. The path for that is something like <code>$ANDROID_SDK_ROOT/system-images/android-17/armeabi-v7a/kernel-qem</code>. If you run into something like below (verbose output from emulator command, happen almost immediately);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">emulator: Kernel parameters: qemu.gles=0 qemu=1 console=ttyS0 android.qemud=ttyS1 android.checkjni=1 ndns=3 </span><br><span class="line">emulator: Trace file name is not set</span><br><span class="line"></span><br><span class="line">emulator: autoconfig: -scale 0.821094</span><br><span class="line">Segmentation fault: 11</span><br></pre></td></tr></table></figure><p>This is likely from some weirdness in the avd from not shutting down properly (or just using it, the emulator is horrid). The easiest way to recover is just kill it (<code>rm -rf ~/.android/avd/*</code>) and recreate the avd.</p><p><strong>Making a LKM</strong><br>Shortly I’ll post an example to github, but for now here is a very simple LKM that should compile fine. Makefile, should be fully complete, you may need to change the path of both <code>KERNEL_DIR</code> and <code>CCPATH</code>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">obj-m := android_module.o</span><br><span class="line">KERNEL_DIR := ~/repo/android-kern/goldfish/</span><br><span class="line">CCPATH := $(ANDROID_NDK_ROOT)/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin/</span><br><span class="line">CCPATH_EXT := $(CCPATH)arm-linux-androideabi-</span><br><span class="line">EXTRA_CFLAGS=-fno-pic</span><br><span class="line">ARCH=arm</span><br><span class="line">SUBARCH=arm</span><br><span class="line"></span><br><span class="line">all:</span><br><span class="line">        make ARCH=arm CROSS_COMPILE=$(CCPATH_EXT) -C $(KERNEL_DIR) M=$(PWD) modules</span><br><span class="line">clean:</span><br><span class="line">        make -C $(KERNEL_DIR) M=$(PWD) clean</span><br><span class="line">        rm -rf *.c~</span><br><span class="line">        rm -rf *.o</span><br><span class="line">        rm -f modules.order</span><br></pre></td></tr></table></figure><p>The helloworld code for android_module;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;linux/module.h&gt;</span><br><span class="line">#include &lt;linux/kernel.h&gt;</span><br><span class="line"></span><br><span class="line">int init_module(void)</span><br><span class="line">&#123;</span><br><span class="line">  printk(KERN_ALERT &quot;Hello android kernel...\\n&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">void cleanup_module(void)</span><br><span class="line">&#123;</span><br><span class="line">  printk(KERN_INFO &quot;Goodbye android kernel...\\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(&quot;Tim &#x27;diff&#x27; Strazzere&quot;);</span><br><span class="line">MODULE_LICENSE(&quot;GPL&quot;); // This prevents a &quot;module license &#x27;unspecified&#x27; taints kernel.&quot; msg</span><br><span class="line">MODULE_VERSION(&quot;1&quot;);</span><br><span class="line">MODULE_DESCRIPTION(&quot;Ptracers gunna ptrace&quot;);</span><br></pre></td></tr></table></figure><p>Dump both of these into any directory and run make after making the appropriate changes. You should then have an android_module.ko file. From here just push it to the emulator via adb, then use insmod&#x2F;lsmod&#x2F;rmmod as needed and enjoy. Depending on the time I have for the rest of the week, I’ll try to dump some kernel modules I’ve written and used for malware analysis on my github.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;So you want to rootkit the emulator? These are rough notes I took while attempt to get this working on my own machine (OSX 10.8.5) - resu</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="coding" scheme="https://strazzere.com/categories/android/coding/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/coding/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="emulator" scheme="https://strazzere.com/tags/emulator/"/>
    
    <category term="kernel" scheme="https://strazzere.com/tags/kernel/"/>
    
    <category term="compile" scheme="https://strazzere.com/tags/compile/"/>
    
    <category term="LKM" scheme="https://strazzere.com/tags/LKM/"/>
    
    <category term="qemu" scheme="https://strazzere.com/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>Loose Documentation Leads to Easy Disassembler Breakages</title>
    <link href="https://strazzere.com/2013/02/loose-documentation-leads-to-easy-disassembler-breakages/"/>
    <id>https://strazzere.com/2013/02/loose-documentation-leads-to-easy-disassembler-breakages/</id>
    <published>2013-02-16T02:23:41.000Z</published>
    <updated>2024-06-18T21:20:59.093Z</updated>
    
    <content type="html"><![CDATA[<p>As people have seen in the past, I tend to have a fun time finding edge-cases which break tools. Often you can find these types of edge-cases while reading documentation and cross referencing the implementation of that in the systems your validating. A pretty good example of this is highlighted in my BlackHat 2012 talk, where I was looking at the header section, which is described as always have the value of 0x70. When looking at the open source tools, some checked to make sure this was true - others ignored it. The actual code in the <a href="http://androidxref.com/4.2.2_r1/xref/dalvik/libdex/DexSwapVerify.cpp#2888">Dex Verifier</a> is as follows;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (okay) &#123;</span><br><span class="line">    state.pHeader = pHeader;</span><br><span class="line"></span><br><span class="line">    if (pHeader-&gt;headerSize &lt; sizeof(DexHeader)) &#123;</span><br><span class="line">        ALOGE(&quot;ERROR: Small header size %d, struct %d&quot;,</span><br><span class="line">                pHeader-&gt;headerSize, (int) sizeof(DexHeader));</span><br><span class="line">        okay = false;</span><br><span class="line">    &#125; else if (pHeader-&gt;headerSize &gt; sizeof(DexHeader)) &#123;</span><br><span class="line">        ALOGW(&quot;WARNING: Large header size %d, struct %d&quot;,</span><br><span class="line">                pHeader-&gt;headerSize, (int) sizeof(DexHeader));</span><br><span class="line">        // keep going?</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From this we can see the actual implementation doesn’t care what the size of, as long as it is larger than the current structure size, which is 0x70. This allows for the verifier to be forward compatible, though if anyone was creating a tool and only read the documentation - this might not be fully understood or assumed. This leads me to two extremely easy breakages which I never mentioned in my talk, but noticed IDA Pro 6.4 and Radare would fail against. The issue that IDA Pro and Radare broke against, was a bad file magic. According to the documentation the magic bytes are the following;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEX_FILE_MAGIC</span><br><span class="line">embedded in header_item The constant array/string DEX_FILE_MAGIC is the list of bytes that must appear at the beginning of a .dex file in order for it to be recognized as such. The value intentionally contains a newline (&quot;\n&quot; or 0x0a) and a null byte (&quot;\0&quot; or 0x00) in order to help in the detection of certain forms of corruption. The value also encodes a format version number as three decimal digits, which is expected to increase monotonically over time as the format evolves.</span><br><span class="line"></span><br><span class="line">ubyte[8] DEX_FILE_MAGIC = &#123; 0x64 0x65 0x78 0x0a 0x30 0x33 0x35 0x00 &#125; = &quot;dex\n035\0&quot;</span><br><span class="line"></span><br><span class="line">Note: At least a couple earlier versions of the format have been used in widely-available public software releases. For example, version 009 was used for the M3 releases of the Android platform (November–December 2007), and version 013 was used for the M5 releases of the Android platform (February–March 2008). In several respects, these earlier versions of the format differ significantly from the version described in this document.</span><br></pre></td></tr></table></figure><p>So one might assume that the currently accepted magic bytes will be exactly <code>dex\n035\00</code> - though, they would be wrong in assuming this. If we take a look at the code in <a href="http://androidxref.com/4.2.2_r1/xref/dalvik/libdex/DexSwapVerify.cpp#2785">DexFile.h</a>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/* DEX file magic number */</span><br><span class="line">#define DEX_MAGIC      &quot;dex\n&quot;</span><br><span class="line"></span><br><span class="line">/* current version, encoded in 4 bytes of ASCII */</span><br><span class="line">#define DEX_MAGIC_VERS  &quot;036\0&quot;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * older but still-recognized version (corresponding to Android API</span><br><span class="line"> * levels 13 and earlier</span><br><span class="line"> */</span><br><span class="line">#define DEX_MAGIC_VERS_API_13  &quot;035\0&quot;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">/* (documented in header file) */</span><br><span class="line">bool dexHasValidMagic(const DexHeader* pHeader)</span><br><span class="line">&#123;</span><br><span class="line">    const u1* magic = pHeader-&gt;magic;</span><br><span class="line">    const u1* version = &amp;magic[4];</span><br><span class="line"></span><br><span class="line">    if (memcmp(magic, DEX_MAGIC, 4) != 0) &#123;</span><br><span class="line">        ALOGE(&quot;ERROR: unrecognized magic number (%02x %02x %02x %02x)&quot;,</span><br><span class="line">            magic[0], magic[1], magic[2], magic[3]);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ((memcmp(version, DEX_MAGIC_VERS, 4) != 0) &amp;&amp;</span><br><span class="line">            (memcmp(version, DEX_MAGIC_VERS_API_13, 4) != 0)) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * Magic was correct, but this is an unsupported older or</span><br><span class="line">         * newer format variant.</span><br><span class="line">         */</span><br><span class="line">        ALOGE(&quot;ERROR: unsupported dex version (%02x %02x %02x %02x)&quot;,</span><br><span class="line">            version[0], version[1], version[2], version[3]);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see that there are constant magic bytes of <code>dex\n</code>, but the versioning afterwards - which is loosely explained in the documentation, has multiple options. Since API level 14 on, the verifier has accepted both “036\00” and “035\00” as valid versioning parts of the magic bytes. Since the magic bytes are not part of the checksum or the signature of the dex file, one can simply bump the version number without any specialized tools, just doing it with a hex editor would be fine. This lead to Radare failing to load the file and IDA Pro to thinking the file was corrupt with the following dialog and log output; <a href="http://www.strazzere.com/blog/wp-content/uploads/2013/02/corrupt-file1.png"><img src="http://www.strazzere.com/blog/wp-content/uploads/2013/02/corrupt-file1.png" alt="Corrupt File Dialog"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Loading file &#x27;/Users/tstrazzere/reverse/targets/ida/classes-test.dex&#x27; into database...</span><br><span class="line">Detected file format: Android DEX file version 54.0</span><br><span class="line">bad dex version (0x30 33 36 00)</span><br></pre></td></tr></table></figure><p>I originally reported this issue to January 22nd, 2013 and received a thank you and a fix back from them only two days later on the 24th. I’m unsure if they sent this out to all their customers or have it totally bundled into their latest packages, but you should easily be able to request it if not. For Radare I <a href="https://github.com/strazzere/radare2/commit/3fcc031083016385fa201b3885896c758393d7f4">submitted a patch</a> for this issue which was quickly merge upstream by the extremely proactive author of the tool. The second breakage, which only directly effected IDA Pro, was revolving around the file size as dictated by the dex_header vs the actual file size. IDA Pro was comparing the two, and if they where not actually equal - assumes the file is corrupt. The documentation states, “size of the entire file (including the header), in bytes”, though the implementation of the code doesn’t actually care - as seen from the <a href="http://androidxref.com/4.2.2_r1/xref/dalvik/libdex/DexSwapVerify.cpp#2836">DexSwapVerify.cpp</a> file;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (okay) &#123;</span><br><span class="line">    int expectedLen = (int) SWAP4(pHeader-&gt;fileSize);</span><br><span class="line">    if (len &lt; expectedLen) &#123;</span><br><span class="line">        ALOGE(&quot;ERROR: Bad length: expected %d, got %d&quot;, expectedLen, len);</span><br><span class="line">        okay = false;</span><br><span class="line">    &#125; else if (len != expectedLen) &#123;</span><br><span class="line">        ALOGW(&quot;WARNING: Odd length: expected %d, got %d&quot;, expectedLen,</span><br><span class="line">                len);</span><br><span class="line">        // keep going</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we can see from above, if the actual length must be at least as large as the expected length, most likely to avoid any truncated files. Though it can easily be larger, which will just produce a warning - though processing of the dex file will continue. However, the same corrupt file dialog with this logging message comes up when loaded in IDA Pro; <a href="http://www.strazzere.com/blog/wp-content/uploads/2013/02/corrupt-file1.png"><img src="http://www.strazzere.com/blog/wp-content/uploads/2013/02/corrupt-file1.png" alt="Corrupt File Dialog"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Loading file &#x27;/Users/tstrazzere/reverse/targets/ida/classes-test.dex&#x27; into database...</span><br><span class="line">Detected file format: Android DEX file version 53.0</span><br><span class="line">ERROR: stored file size (438844) != expected (438845)</span><br></pre></td></tr></table></figure><p>This was also fixed on the same timeline as the other issue I reported to Hex-Rays, so if you run across any files like this you will be prompted with this dialog; <a href="http://www.strazzere.com/blog/wp-content/uploads/2013/02/extra_info.jpg"><img src="http://www.strazzere.com/blog/wp-content/uploads/2013/02/extra_info.jpg" alt="Extra data"></a> Just two small little issues that came about when looking at the implementation of the file format. These edge-cases always seem to exist in ever system, especially when creating reversing&#x2F;disassembling&#x2F;analyzing tools.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;As people have seen in the past, I tend to have a fun time finding edge-cases which break tools. Often you can find these types of edge-c</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="dex bytecode" scheme="https://strazzere.com/categories/android/dex-bytecode/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/dex-bytecode/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="IDA Pro" scheme="https://strazzere.com/tags/IDA-Pro/"/>
    
    <category term="dex header" scheme="https://strazzere.com/tags/dex-header/"/>
    
    <category term="dex verification" scheme="https://strazzere.com/tags/dex-verification/"/>
    
    <category term="documentation" scheme="https://strazzere.com/tags/documentation/"/>
    
    <category term="radare" scheme="https://strazzere.com/tags/radare/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Malware Cross-Contamination in Android apks</title>
    <link href="https://strazzere.com/2013/02/javascript-malware-cross-contamination-in-android-apks/"/>
    <id>https://strazzere.com/2013/02/javascript-malware-cross-contamination-in-android-apks/</id>
    <published>2013-02-07T04:33:49.000Z</published>
    <updated>2024-06-18T21:20:59.093Z</updated>
    
    <content type="html"><![CDATA[<p>A colleague of mine, specifically from a different AV vendor, was poking around some files and was curious as to what these somewhat odd files where;<br><a href="https://www.virustotal.com/file/6d55d46a988df08de85d066121be88f0837697793cd824bdc604b5368925950e/analysis/" title="VirusTotal Analysis Sha1: e4105ae117e62c784e26ae113a6119bd33a570cf">VirusTotal Analysis Sha1: e4105ae117e62c784e26ae113a6119bd33a570cf</a><br><a href="https://www.virustotal.com/file/6849b9309300374b869fb9d9e11994bbdeff62017334d653e95ddb4d8e859974/analysis/" title="VirusTotal Analysis Sha1: 16111c45832a20914cfd9306501b406e2ae89b58">VirusTotal Analysis Sha1: 16111c45832a20914cfd9306501b406e2ae89b58</a><br>An apk (Android package) which is being detected by a ton of vendors, as having a javascript trojan dropper inside of it. Wait what? Is this some interesting new breed of Android malware, possibly leveraging <a href="http://www.securelist.com/en/blog/805/Mobile_attacks">USB attacks</a> too!? Well, no - no it isn’t, it actually just is a curious case of cross-contamination. These files appear to be “infected” inside the embedded HTML files;</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">champagne:html tstrazzere$ grep -ir &quot;script&quot; * | less</span><br><span class="line">cs/tethering_help.html:</span><br><span class="line">cs/tethering\_usb\_help.html:</span><br><span class="line">cs/tethering\_wifi\_help.html:</span><br><span class="line">da/tethering_help.html:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>We can see the offending code which is being flagged, nothing to do with any of the actual Android parts. We can see this is the actual detected part by just looking it up on VirusTotal.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">champagne:html tstrazzere$ echo -n $&#x27;&#x27; | shasum</span><br><span class="line">3c4e3917661442be9ec92adf6ba5b93989a4dd7e -</span><br></pre></td></tr></table></figure><p>Which looking up that sha1 gives us;<br><a href="https://www.virustotal.com/file/3c1d9f097bbd29904201cb0da37881dcbfad08acee80df883f9bcacf9805cf34/analysis/" title="VirusTotal Analysis Sha1: 3c4e3917661442be9ec92adf6ba5b93989a4dd7e">VirusTotal Analysis Sha1: 3c4e3917661442be9ec92adf6ba5b93989a4dd7e</a><br>So does this seem intentional, or accidental? Was someone actually trying to infect Android devices, or was this just a strange mishap? I’m inclined to believe this was just a strange coincidence, both of the applications are the Android settings application, “com.android.settings” - and signed with the commonly found AOSP debug signer. What appears to have happened, is someone was compiling the AOSP, possibly for a custom ROM, and had these HTML files located on an infected host. The virus then infected these HTML files by injecting the javascript load code, and then these APKs where bundled. We can see that these where actually properly bundled;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">champagne:elad tstrazzere$ jarsigner -verbose -verify com.android.settings_1eaffc274ae549e0ecb4145857ae3fa6ad0fd3c5.apk </span><br><span class="line"></span><br><span class="line">       39208 Wed Apr 16 07:40:50 PDT 2008 META-INF/MANIFEST.MF</span><br><span class="line">       39250 Wed Apr 16 07:40:50 PDT 2008 META-INF/CERT.SF</span><br><span class="line">        1714 Wed Apr 16 07:40:50 PDT 2008 META-INF/CERT.RSA</span><br><span class="line">sm 53588 Wed Apr 16 07:40:50 PDT 2008 AndroidManifest.xml</span><br><span class="line">sm 1710 Wed Apr 16 07:40:50 PDT 2008 assets/html/cs/tethering_help.html</span><br><span class="line">sm 1027 Wed Apr 16 07:40:50 PDT 2008 assets/html/cs/tethering\_usb\_help.html</span><br><span class="line">sm 987 Wed Apr 16 07:40:50 PDT 2008 assets/html/cs/tethering\_wifi\_help.html</span><br><span class="line">sm 1433 Wed Apr 16 07:40:50 PDT 2008 assets/html/da/tethering_help.html</span><br><span class="line">sm 833 Wed Apr 16 07:40:50 PDT 2008 assets/html/da/tethering\_usb\_help.html</span><br><span class="line">sm 904 Wed Apr 16 07:40:50 PDT 2008 assets/html/da/tethering\_wifi\_help.html</span><br><span class="line">sm 1585 Wed Apr 16 07:40:50 PDT 2008 assets/html/de/tethering_help.html</span><br><span class="line">sm 922 Wed Apr 16 07:40:50 PDT 2008 assets/html/de/tethering\_usb\_help.html</span><br><span class="line">…</span><br><span class="line">  s = signature was verified </span><br><span class="line">  m = entry is listed in manifest</span><br><span class="line">  k = at least one certificate was found in keystone</span><br><span class="line">  i = at least one certificate was found in identity scope</span><br><span class="line"></span><br><span class="line">jar verified.</span><br></pre></td></tr></table></figure><p>The interesting part is that the signature did verify, meaning that at time of signing for this APK, that javascript file was included. So did this actually do anything to the devices? No - not really, however there might be someone with a custom ROM which has all these files on their device. Since the url’s being added are all long since dead, there shouldn’t any adverse side effects. Though it would appear that the application is going to read the contents of the HTML files in, then load them into an AlertDialog - where that javascript should not actually perform any actions. As a last side note - I did edit the output that is displayed in this blog to be “hxxp” opposed to “http”. When I didn’t do this, even though the scripts where not being executed, Google Safe Browsing was blocking me from ever seeing my own blog :)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A colleague of mine, specifically from a different AV vendor, was poking around some files and was curious as to what these somewhat odd </summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="malware" scheme="https://strazzere.com/tags/malware/"/>
    
    <category term="com.android.settings" scheme="https://strazzere.com/tags/com-android-settings/"/>
    
    <category term="cross-contamination" scheme="https://strazzere.com/tags/cross-contamination/"/>
    
    <category term="javascript" scheme="https://strazzere.com/tags/javascript/"/>
    
    <category term="virustotal" scheme="https://strazzere.com/tags/virustotal/"/>
    
  </entry>
  
  <entry>
    <title>Android Zitmo Analysis: Now you see me, now you don&#39;t</title>
    <link href="https://strazzere.com/2012/08/android-zitmo-analysis-now-you-see-my-now-you-dont/"/>
    <id>https://strazzere.com/2012/08/android-zitmo-analysis-now-you-see-my-now-you-dont/</id>
    <published>2012-08-14T05:46:09.000Z</published>
    <updated>2024-06-18T21:20:59.087Z</updated>
    
    <content type="html"><![CDATA[<p>Early last week, Denis from Kaspersky had <a href="https://www.securelist.com/en/blog/208193760/New_ZitMo_for_Android_and_Blackberry">blogged</a> about a new Zitmo (Zeus in the Mobile) variant which was affecting both Android and Blackberry. After some digging I was finally able to turn up a sample for analysis. Originally I figured it would be the same old sample as before, wouldn’t do much and not be very sophisticated at all. Turns out I was half right, most of it was identical to previous samples - though I did learn new little trick from the malware this time around.</p><p>After I did a tear down I submitted a sample to Mila over at the <a href="http://contagiominidump.blogspot.com/">Contagio Mobile Dump</a>, so if you’d like to follow along the sample I was dissecting you can find it <a href="http://contagiominidump.blogspot.com/2012/08/new-zitmo-for-android-and-blackberry.html">here</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Filename: zitmo.apk</span><br><span class="line">SHA256: 40286c6091c5a2d575702b1d88eaa94aa8eba524</span><br><span class="line">MD5: e98791dffcc0a8579ae875149e3c8e5e</span><br></pre></td></tr></table></figure><p>Firing up our trusty keytool, we can see what the certificate is - try to get an estimated date when this file was created;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">champagne:zitmo-sample tstrazzere$ printcert contents/META-INF/*.RSA</span><br><span class="line">Owner: CN=Android Debug, O=Android, C=US</span><br><span class="line">Issuer: CN=Android Debug, O=Android, C=US</span><br><span class="line">Serial number: 5007c89d</span><br><span class="line">Valid from: Thu Jul 19 01:43:09 PDT 2012 until: Sat Jul 12 01:43:09 PDT 2042</span><br><span class="line">Certificate fingerprints:</span><br><span class="line"> MD5:  A5:D9:08:26:EC:E0:74:4F:E8:89:35:53:F0:6E:28:55</span><br><span class="line"> SHA1: B3:23:BD:C7:A3:24:9F:C1:8E:85:44:A8:ED:09:2C:3A:41:3D:23:80</span><br><span class="line"> Signature algorithm name: SHA1withRSA</span><br><span class="line"> Version: 3</span><br><span class="line">champagne:zitmo-sample tstrazzere$ ls -l contents/META-INF/*</span><br><span class="line">-rw-r--r--@ 1 tstrazzere 776B Jul 24 07:12 contents/META-INF/CERT.RSA</span><br><span class="line">-rw-r--r--@ 1 tstrazzere 1.1K Jul 24 07:12 contents/META-INF/CERT.SF</span><br><span class="line">-rw-r--r--@ 1 tstrazzere 1.0K Jul 24 07:12 contents/META-INF/MANIFEST.MF</span><br></pre></td></tr></table></figure><p>So, assuming that the malware author hasn’t been messing around with timestamps, we can assume that the malware was created before or on July 24 of this year - and signed on that day as well. As a sanity check, the Android debug certificate validates this, since it was created before this date. This is in no way concrete that it was actually build&#x2F;signed on that day - but it does give us a decent idea of the timeframe.</p><p>The next piece of interest lays within the AndroidManifest.xml - let’s see how the author intends this application to be started;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest</span><br><span class="line"> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line"> android:versionCode=&quot;1&quot;</span><br><span class="line"> android:versionName=&quot;1.0&quot;</span><br><span class="line"> android:installLocation=&quot;1&quot;</span><br><span class="line"> package=&quot;com.security.service&quot;&gt;</span><br><span class="line"> &lt;uses-permission</span><br><span class="line">  android:name=&quot;android.permission.RECEIVE_SMS&quot;&gt;</span><br><span class="line">  &lt;/uses-permission&gt;</span><br><span class="line"> &lt;uses-permission</span><br><span class="line">  android:name=&quot;android.permission.SEND_SMS&quot;&gt;</span><br><span class="line">  &lt;/uses-permission&gt;</span><br><span class="line"> &lt;uses-sdk</span><br><span class="line">  android:minSdkVersion=&quot;4&quot;</span><br><span class="line">  android:targetSdkVersion=&quot;16&quot;&gt;</span><br><span class="line">  &lt;/uses-sdk&gt;</span><br><span class="line">  &lt;application</span><br><span class="line">   android:theme=&quot;@7F060000&quot;</span><br><span class="line">   android:label=&quot;@7F050000&quot;</span><br><span class="line">   android:icon=&quot;@7F020001&quot;</span><br><span class="line">   android:debuggable=&quot;true&quot;&gt;</span><br><span class="line">  &lt;activity</span><br><span class="line">   android:theme=&quot;@7F060001&quot;</span><br><span class="line">   android:name=&quot;com.security.service.MainActivity&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">     &lt;category</span><br><span class="line">      android:name=&quot;android.intent.category.LAUNCHER&quot;&gt;</span><br><span class="line">     &lt;/category&gt;</span><br><span class="line">     &lt;action</span><br><span class="line">      android:name=&quot;android.intent.action.MAIN&quot;&gt;</span><br><span class="line">     &lt;/action&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">   &lt;/activity&gt;</span><br><span class="line">   &lt;receiver</span><br><span class="line">    android:name=&quot;com.security.service.receiver.ActionReceiver&quot;</span><br><span class="line">    android:permission=&quot;android.permission.RECEIVE\_BOOT\_COMPLETED&quot;</span><br><span class="line">    android:enabled=&quot;true&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">     &lt;category</span><br><span class="line">      android:name=&quot;android.intent.category.HOME&quot;&gt;</span><br><span class="line">     &lt;/category&gt;</span><br><span class="line">     &lt;action</span><br><span class="line">      android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;&gt;</span><br><span class="line">     &lt;/action&gt;</span><br><span class="line">     &lt;action</span><br><span class="line">      android:name=&quot;android.intent.action.USER_PRESENT&quot;&gt;</span><br><span class="line">     &lt;/action&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">   &lt;/receiver&gt;</span><br><span class="line">   &lt;receiver</span><br><span class="line">    android:name=&quot;com.security.service.receiver.SmsReceiver&quot;</span><br><span class="line">    android:enabled=&quot;true&quot;&gt;</span><br><span class="line">    &lt;intent-filter</span><br><span class="line">     android:priority=&quot;2147483647&quot;&gt;</span><br><span class="line">    &lt;action</span><br><span class="line">      android:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;&gt;</span><br><span class="line">     &lt;/action&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">   &lt;/receiver&gt;</span><br><span class="line">   &lt;receiver</span><br><span class="line">    android:name=&quot;com.security.service.receiver.RebootReceiver&quot;</span><br><span class="line">    android:permission=&quot;android.permission.REBOOT&quot;</span><br><span class="line">    android:enabled=&quot;true&quot;&gt;</span><br><span class="line">     &lt;intent-filter&gt;</span><br><span class="line">     &lt;action</span><br><span class="line">      android:name=&quot;android.intent.action.REBOOT&quot;&gt;</span><br><span class="line">     &lt;/action&gt;</span><br><span class="line">     &lt;action</span><br><span class="line">       android:name=&quot;android.intent.action.ACTION_SHUTDOWN&quot;&gt;</span><br><span class="line">     &lt;/action&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">   &lt;/receiver&gt;</span><br><span class="line">  &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>According the <code>AndroidManifest</code> above we can see the application has four main entry points;</p><ul><li><code>MainActivity</code> - launched as the main activity, which should be visible by the launcher&#x2F;tray</li><li><code>ActionReceiver</code> - launched when the <code>HOME</code>, <code>BOOT_COMPLETED</code> or <code>USER_PRESENT</code> intent is fired by the system</li><li><code>SmsReceiver</code> - launched when the <code>SMS_RECEIVED</code> intent is fired, with a priority of <code>Integer.MAX_VALUE</code></li><li><code>RebootReceiver</code> - launched when the <code>REBOOT</code> or <code>ACTION_SHUTDOWN</code> intent is fired</li></ul><p>This seemed like a bit to many receivers right off the bat, it seems odd that there is a reboot receiver - though maybe the author was trying to more than just intercept SMS messages? Let’s first dig into the code and see how the malware is looking to get started. Loading up IDA Pro and a terminal with baksmali, there is something we can notice right off away, the authors where using the latest Android SDK - there is a ton of support code in the <code>android/support</code> directory used for backwards compatibility. It’s actually a bit funny as there is more code in those files than the malware itself!</p><p>Looking at the <code>MainActivity</code> default create method, we can see the only code which a user might actually see when the malware is launched;<br><img src="http://www.strazzere.com/blog/wp-content/uploads/2012/08/onCreate.png" alt="MainActivity.onCreate" title="MainActivity.onCreate"></p><p>Essentially the bulk of the of the code is just checking a <code>PersistenceManager</code> object, which is just a wrapper for the normal Android <code>SharedPreference</code> object. This checks to see if the application has been run or not before. If the application has not been run, it will mark the first run as having occurred - followed by running the <code>SmsReceiver.sendInintSms()</code> function. This function, pictured below, gets the default admin number (+46769436094) and sends it the message “INOK”.<br><img src="http://www.strazzere.com/blog/wp-content/uploads/2012/08/sendInintSms1.png" alt="SmsReceiver.sendInintSms()" title="SmsReceiver.sendInintSms()"></p><p>The next receiver to look at is the <code>ActionReceiver</code>. This is also very simple - essentially if the intent is either <code>BOOT_COMPLETED</code> or <code>USER_PRESENT</code> then it will attempt to kick of the <code>MainActivity</code>, which would cause the code above to be launched. This is also gated by the same <code>isFirstLaunch</code> function from the <code>PersistenceManager</code> class. The cleaned up code for this receiver is below, pretty self explanatory as well;<br><img src="http://www.strazzere.com/blog/wp-content/uploads/2012/08/ActionReceiver.png" alt="ActionReceiver.onReceiver(...)" title="ActionReceiver.onReceiver(...)"></p><p>The main functionality of the malware is located where it has been for the last few Zitmo samples, inside the <code>SmsReceiver</code>. The <code>onReceive</code> method essentially houses a large switch statement which will allow the following commands to be parsed;</p><ul><li><code>on</code> - replies “ONOK” if sent from admin #, then sets the sms interceptor on</li><li><code>off</code> - replies “OFOK” if sent from admin #, then sets the sms interceptor off</li><li><code>set admin</code> - replies “SAOK” if sent from admin #, then sets a new admin # to user</li></ul><p>All of the commands above will have their broadcast aborted, so no other application should receive the SMS message. If any other SMS is received other than the commands above the code follows a simple path. It will abort the broadcast aborted and the message sent to the admin number in the format of: “message ${SMS_BODY}, F: ${SMS_SENDER}”. These basic commands, combined with the a PC infected with Zeus, is enough for the authors to programmatically intercept mTans for what would appear to be German bank users. So what, right? I said there was something interesting about this malware - yet everything described has been old stuff. Well the interesting part for me happened when I looked at the last receiver, which didn’t seem like it would be necessary. The malware already has all the code it needs to function as normal, right? Well - it actually is going to attempt to hide itself from the user on a reboot. If we look back at the <code>AndroidManifest.xml</code> we can see the activity tag which lets the application appear in the launcher&#x2F;tray of the device;</p><p>Previously, we’ve seen malware that avoids putting this into the manifest, trying to hide from the user. In this case, the malware does want to be found and hopefully executed by the user. The trick is, they only want this to be visible to the user for one boot. If we take a look at the <code>RebootReceiver.onReceive</code> function, we can see a simple code path that checks for the <code>REBOOT</code> or <code>ACTION_SHUTDOWN</code> intents. If either is caught by their receiver, it will call the <code>MainActivity.hideIcon()</code> function. The pseudo code for this function is as follows;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void hideIcon(Context context) &#123;</span><br><span class="line">    PackageManager packageManager = context.getPackageManager();</span><br><span class="line">    packageManager.setComponentEnabledSetting(</span><br><span class="line">      new ComponentName(&quot;com.security.service&quot;,</span><br><span class="line">        &quot;com.security.service.MainActivity&quot;),</span><br><span class="line">      COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">      DONT_KILL_APP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code will dynamically remove the receiver component, even though it is still set within the <code>AndroidManifest.xml</code>. This means on reboot, the icon will no longer be present inside the launch&#x2F;tray of the device, but the other receivers should still remain active. While this isn’t rocket science - mainly just understand the Android APIs, it’s something I’ve never seen any malware do. Performing a few Google searches, it doesn’t seem to be something widely used or deployed in practice. I did perform a few searches though for applications that did this and found a few that used this to be “less annoying” to a user and hide when they where not wanted. This is also recommended for something like an option <code>BOOT_COMPLETE</code> intent, such as an option service that a user might not want from an application.</p><p><em>TL;DR</em> - You can dynamically disable you competent in your Android application, effectively “hiding” yourself from a users launcher&#x2F;tray.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Early last week, Denis from Kaspersky had &lt;a href=&quot;https://www.securelist.com/en/blog/208193760/New_ZitMo_for_Android_and_Blackberry&quot;&gt;blo</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="DONT_KILL_APP" scheme="https://strazzere.com/tags/DONT-KILL-APP/"/>
    
    <category term="malware" scheme="https://strazzere.com/tags/malware/"/>
    
    <category term="setComponentEnabledSetting" scheme="https://strazzere.com/tags/setComponentEnabledSetting/"/>
    
    <category term="zeus" scheme="https://strazzere.com/tags/zeus/"/>
    
    <category term="zitmo" scheme="https://strazzere.com/tags/zitmo/"/>
    
  </entry>
  
  <entry>
    <title>Dexploration: What a default Dex looks like</title>
    <link href="https://strazzere.com/2012/08/dexploration-what-a-default-dex-looks-like/"/>
    <id>https://strazzere.com/2012/08/dexploration-what-a-default-dex-looks-like/</id>
    <published>2012-08-03T21:09:53.000Z</published>
    <updated>2024-06-18T21:20:59.090Z</updated>
    
    <content type="html"><![CDATA[<p>During the research phase of my <a href="http://www.strazzere.com/blog/2012/08/a-lesson-in-safe-dex/">Blackhat talk</a>, I was digging into detecting the default layout of a dexfile, as generated by the normal <em>dx</em> tool. Originally, my concept was that I wanted my tool to “stack” things inside the file the same way that the dalvik compiler would, though I couldn’t find any actual resources on what this actually looked like. After a few hours of digging through code on AOSP and tearing apart an actual dex file to look at the innards, I came up with the quick little ASCII diagram below;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Dex header     </span><br><span class="line">|\* offsets and sizes of all sections     </span><br><span class="line">|\- default size 0x70     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| String\_id\_list     </span><br><span class="line">|\* offsets into data     </span><br><span class="line">|\- size: number of strings * 4     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Type\_id\_list     </span><br><span class="line">|   \* index into string\_id\_list     </span><br><span class="line">|\- size: number of types * 4     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Proto\_id\_list     </span><br><span class="line">|\* index into string\_id\_list     </span><br><span class="line">|\* index into type\_id\_list     </span><br><span class="line">|\* offsets into data section (params)     </span><br><span class="line">|\- size: number of protos * 12     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Field\_id\_list     </span><br><span class="line">|\* 2 indexes into type\_id\_list     </span><br><span class="line">|\* index into string\_id\_list     </span><br><span class="line">|\- size: number of fields * 8     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Method\_id\_list     </span><br><span class="line">|\* index into Type\_id\_list     </span><br><span class="line">|\* index into Proto\_id\_list     </span><br><span class="line">|\* index into String\_id\_list    </span><br><span class="line">|\- size: number of methods * 8     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Class\_def\_items     </span><br><span class="line">|\* 2 indexes into Type\_id\_list     </span><br><span class="line">|\* offsets into data for interfaces     </span><br><span class="line">|  \* indexes into Type\_id\_list     </span><br><span class="line">|\* index into string\_id\_list for source file     </span><br><span class="line">|\* offsets into data for annotation          </span><br><span class="line">|  \* offsets into data for annotation_set     </span><br><span class="line">|    \* offsets into class data for annotation item    </span><br><span class="line">|\* offsets into data for class\_data\_items          </span><br><span class="line">|  \* index into method_id     </span><br><span class="line">|\* offsets into data for static_values     </span><br><span class="line">|\* offsets into data for code_item     </span><br><span class="line">|  \* offsets into data for debug_item     </span><br><span class="line">|\- size: number of classes * 20     </span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Data section (default layout)     </span><br><span class="line">|          \* annotation items      </span><br><span class="line">|\* code items      </span><br><span class="line">|\* annotation_directory     </span><br><span class="line">|\* interfaces     </span><br><span class="line">|\* parameters - used by proto section     </span><br><span class="line">|\* strings     </span><br><span class="line">|\* debug items     </span><br><span class="line">|\* annotation_sets     </span><br><span class="line">|\* static values     </span><br><span class="line">|\* class_data     </span><br><span class="line">|\* map list     </span><br><span class="line">+--------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>The result of the <a href="https://github.com/strazzere/APKfuscator">APKfuscator</a> actually ended up being quiet different than the above mappings. It’s definitely possibly to retain the structure, however the sections can easily be interchanged. The resulting sections from my tool look like the following;</p><p>Above sections are identical as to layout, but could be shifted around if need be</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Data section (default layout)     </span><br><span class="line">|          \*  strings</span><br><span class="line">|          \*  parameters (proto section)</span><br><span class="line">|          \*  interfaces</span><br><span class="line">|          \*  annotation items (visibility of item (flags),</span><br><span class="line">|                               annotation type, number of name,</span><br><span class="line">|                               encoded annotation)</span><br><span class="line">|          \*  class annotations (size of items, offsets to items) </span><br><span class="line">|          \*  annotation data (offset to class annotations,</span><br><span class="line">|                              fields size, methods size,</span><br><span class="line">|                              parameters size) </span><br><span class="line">|          \*  code items</span><br><span class="line">|          \*  class data</span><br><span class="line">|          \*  static values</span><br><span class="line">|          \*  debug items (currently stripped)</span><br><span class="line">|          \*  map list</span><br><span class="line">+--------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>The patterns for the normal dx compiler appear to always lay out the same, so if someone has developed a post-compilation modification tool (i.e. - APKfuscator or (bak)smali), it might be possible to see that a dex file has been “changed”. If someone was to develop a tool to look for patterns about how this data is laid out, it could lead to some interesting results. Being able to detect these changes and patterns, run on a large enough scale, could be an interesting tactic to finding out whether or not someone has messed with a file quickly. Hopefully I’ll have more time to research this area and either prove or disprove this theory. Though, until then - hopefully the small ASCII layouts might help someone else with whatever work they’re doing on dalvik research.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;During the research phase of my &lt;a href=&quot;http://www.strazzere.com/blog/2012/08/a-lesson-in-safe-dex/&quot;&gt;Blackhat talk&lt;/a&gt;, I was digging in</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="dex bytecode" scheme="https://strazzere.com/categories/android/dex-bytecode/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/dex-bytecode/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="apkfuscator" scheme="https://strazzere.com/tags/apkfuscator/"/>
    
    <category term="dalvik" scheme="https://strazzere.com/tags/dalvik/"/>
    
    <category term="dex bytecode" scheme="https://strazzere.com/tags/dex-bytecode/"/>
    
    <category term="dex file" scheme="https://strazzere.com/tags/dex-file/"/>
    
    <category term="dex header" scheme="https://strazzere.com/tags/dex-header/"/>
    
    <category term="dex layout" scheme="https://strazzere.com/tags/dex-layout/"/>
    
    <category term="reverse engineer" scheme="https://strazzere.com/tags/reverse-engineer/"/>
    
  </entry>
  
  <entry>
    <title>A Lesson in Safe Dex</title>
    <link href="https://strazzere.com/2012/08/a-lesson-in-safe-dex/"/>
    <id>https://strazzere.com/2012/08/a-lesson-in-safe-dex/</id>
    <published>2012-08-02T22:29:02.000Z</published>
    <updated>2024-06-18T21:20:59.085Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.strazzere.com/blog/wp-content/uploads/2012/08/presentation-cropped.png" alt="Presenting at Blackhat 2012" title="Presenting at Blackhat 2012"><br>It’s been almost a full week since my talk, <a href="https://www.blackhat.com/html/bh-us-12/bh-us-12-briefings.html#Strazzere">Dex Education: Practicing Safe Dex</a>, though I think I’m only now beginning to recover. The past few months have truly been a whirlwind of both working on dissecting malware at Lookout and working on putting together a solid presentation for BlackHat. So far I’ve been unable to draw a crowd like Charlie, though maybe someday I’ll have people sitting in the aisles fighting for a seat during a presentation. Until then the people who went will just have to deal with the extra legroom. Over all the presentation seemed to go over pretty well, some interesting chats afterwards with some smart people. A few people where interested in the slides and proof of concept code, so I told them I would <a href="https://twitter.com/timstrazz/status/228617373840728064">tweet it</a> and also make a blog post about it.</p><p>My slides are available <a href="http://www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf">here</a> with the proof of concept code being hosted on my github page <a href="https://github.com/strazzere/APKfuscator">here</a>.</p><p>The proof of concept crackme code on the same github page as well shortly. I’ve got some extra content that I wasn’t able to fit into the slide-deck, heck it was 96 slides as is after trimming some things out. While I didn’t intend to try and cover everything possible to break most analysis tools, I wanted to attempt to cover as much as possible. Over the course of a few days or weeks, I’ll try to roll out details in my blog about how certain things worked, mainly for people who where unable to attend the presentation, hear my explanations or ask me things at the conference. Feel free to reach out to me if there is anything I’ve missed or you would live a better explanation about.</p><p>A few people asked me about Blackhat and Defcon - wondering if it’s worth attending. So to step on a soap box just for a minute, I’ll give the mini speech that I normally tell people. Conferences are only worth what you put into them, go to talks that seem interesting and are outside of your direct field of work. Why attend talks outside the direct field of work? I’ve found it’s a great way to try and find different perspectives, which often can be related back into your own work and field. It is also quiet hard to appreciate a talk on something that you deal with daily, definitely very important to try and keep this in mind if you do see those types of talks. As a presenter myself, I found it exceptionally hard to not go <em>too</em> low level while still feeling like I can add value to everyone in the audience. After attending the talks you chose, <em>meet</em> the presenters and pick their brains, this is honestly where you can learn the most. As I have said, it’s really hard to make a presentation accessible for a whole audience, talking directly with these people will give you so much more information than the slides often do. The people you meet at the bars (for Blackhat @ Caesars goto the Galleria bar) are often people you talk to online already. Make friends, go outside that comfort zone and buy some people drinks. Most everyone is friendly, if they aren’t - don’t drink with them. Almost all conferences are worth going to, Blackhat and Defcon included, mainly due to the talent it attacks that you can find hanging out at the bars.</p><p>Probably the greatest thing about Blackhat for me was to meet some really great people I’ve only had the pleasure of talking to online. Talking with Mila, the mind behind Contagio Dump, was really great - able to pay her back a little for all the hard work she does with a beer or two. Got to talk with some of the original DroidSecurity (now AVG) guys, Elad and Oren, it’s <em>never</em> a dull moment talking to an Israeli reverse engineer - just look at <a href="http://www.twitter.com/ihackbanme">Zuk</a>. Another interesting person who I got to hang out with was along side me in the malware talk track, <a href="http://www.twitter.com/snare">@snare</a>. He did some crazy things with <a href="http://ho.ax/posts/2012/07/black-hat-usa-2012/">EFI rootkits for OSX</a>, pretty scary and interesting stuff all in the same talk.</p><p>People often say it isn’t what you know, but who you know. I’d argue the security space is a ying and yang of both; to be a valuable (reverser) engineer you need to know your stuff and the people to help you succeed.</p><p>Enough on this soapbox, hopefully you enjoy the slides and code. If you ever run into me at a conference - let’s have a beer or two and chat.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://www.strazzere.com/blog/wp-content/uploads/2012/08/presentation-cropped.png&quot; alt=&quot;Presenting at Blackhat 2012&quot; title=&quot;Pre</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="dex bytecode" scheme="https://strazzere.com/categories/android/dex-bytecode/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/dex-bytecode/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="apkfuscator" scheme="https://strazzere.com/tags/apkfuscator/"/>
    
    <category term="blackhat" scheme="https://strazzere.com/tags/blackhat/"/>
    
    <category term="blackhat 2012" scheme="https://strazzere.com/tags/blackhat-2012/"/>
    
    <category term="bytecode obfuscation" scheme="https://strazzere.com/tags/bytecode-obfuscation/"/>
    
    <category term="conference" scheme="https://strazzere.com/tags/conference/"/>
    
    <category term="dalvik" scheme="https://strazzere.com/tags/dalvik/"/>
    
    <category term="defcon" scheme="https://strazzere.com/tags/defcon/"/>
    
    <category term="dex" scheme="https://strazzere.com/tags/dex/"/>
    
    <category term="dex bytecode" scheme="https://strazzere.com/tags/dex-bytecode/"/>
    
    <category term="presentation" scheme="https://strazzere.com/tags/presentation/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Security Meetup, DexTemplate and smali-mode!</title>
    <link href="https://strazzere.com/2012/07/mobile-security-meetup-dextemplate-and-smali-mode/"/>
    <id>https://strazzere.com/2012/07/mobile-security-meetup-dextemplate-and-smali-mode/</id>
    <published>2012-07-12T05:03:42.000Z</published>
    <updated>2024-06-18T21:20:59.093Z</updated>
    
    <content type="html"><![CDATA[<p>Tonight there was a great meet up at the Lookout HQ, <a href="http://www.meetup.com/Mobile-Security-and-Privacy/">Mobile Security and Privacy</a> - got to meet a bunch of really smart mobile developers. The topic at hand was one close to me, reverse engineering Android applications. The concept was to show developers how easy it is to do and to help them understand how an attacker might see their code. Along with showcasing the normal tools people use in their day to day lives one of my coworkers, Emil, gave a great little presentation on the overview of how reversing is done for Android. After the demonstration, Emil had some prepared <a href="http://www.baksma.li/meetup/">crackmes</a> for people to try, most of the engineers did surprisingly well for not having reversed anything before!</p><p>After talking with a few people who where asking about reversing, I completely forgot that I’ve never really mentioned <a href="http://www.sweetscape.com/010editor/">010 Editor</a>. This is by far one of the best hex editors I’ve ever used, with an excellent ability to use templates. One of the best parts is, a little over half a year ago, they came out with a fully native OSX client. On top of that Jon Larimer has created a DEX template for it available on his <a href="https://github.com/jlarimer/android-stuff/blob/master/DEXTemplate.bt">github</a>. This is definitely a great way to visualize a dex file and help look for anomalies in them.</p><p>Recently I’ve actually submitted some pull requests which Jon has accepted to better parse the dex files. They should be able to parse the latest dex files generated by the jellybean toolkit and even handle some “oddities” that I’ll be releasing at my BlackHat 2012 talk.</p><p>Along my route for completing my <a href="https://www.blackhat.com/html/bh-us-12/bh-us-12-briefings.html#Strazzere">BlackHat talk, Dex Education: Practicing Safe Dex</a>, I finally updated the smali mode for emacs. It’s available on my <a href="https://github.com/strazzere/Emacs-smali/">github</a> page. It should have color parsing for just about all the elements available inside a smali file - along with the newer jumbo opcodes.</p><p>Around the same time as my presentation at BlackHat, I’ll be posting the slides and proof of concepts to my github. So check back soon for some interesting way to break (and fix) disassembly&#x2F;decompilation tools for Android.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tonight there was a great meet up at the Lookout HQ, &lt;a href=&quot;http://www.meetup.com/Mobile-Security-and-Privacy/&quot;&gt;Mobile Security and Pri</summary>
      
    
    
    
    <category term="android" scheme="https://strazzere.com/categories/android/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/categories/android/reverse-engineering/"/>
    
    
    <category term="android" scheme="https://strazzere.com/tags/android/"/>
    
    <category term="blackhat 2012" scheme="https://strazzere.com/tags/blackhat-2012/"/>
    
    <category term="dalvik" scheme="https://strazzere.com/tags/dalvik/"/>
    
    <category term="dex" scheme="https://strazzere.com/tags/dex/"/>
    
    <category term="reverse engineering" scheme="https://strazzere.com/tags/reverse-engineering/"/>
    
    <category term="emacs" scheme="https://strazzere.com/tags/emacs/"/>
    
    <category term="smali-mode" scheme="https://strazzere.com/tags/smali-mode/"/>
    
    <category term="010 Editor" scheme="https://strazzere.com/tags/010-Editor/"/>
    
    <category term="dex education" scheme="https://strazzere.com/tags/dex-education/"/>
    
    <category term="dextemplate" scheme="https://strazzere.com/tags/dextemplate/"/>
    
  </entry>
  
</feed>
